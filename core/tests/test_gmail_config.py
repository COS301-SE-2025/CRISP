#!/usr/bin/env python3
"""
Simple test to verify Gmail configuration is correctly set up in .env file.
This test doesn't require Django installation.
"""

import os
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from pathlib import Path


def load_env_file():
    """Load environment variables from .env file."""
    env_file = Path(__file__).parent / '.env'
    env_vars = {}
    
    if env_file.exists():
        with open(env_file) as f:
            for line in f:
                line = line.strip()
                if '=' in line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    env_vars[key] = value
                    os.environ.setdefault(key, value)
    
    return env_vars


def test_env_configuration():
    """Test that all required environment variables are set."""
    print("üß™ Testing Environment Configuration...")
    
    env_vars = load_env_file()
    
    required_vars = [
        'EMAIL_HOST',
        'EMAIL_PORT', 
        'EMAIL_HOST_USER',
        'EMAIL_HOST_PASSWORD',
        'CRISP_SENDER_EMAIL',
        'CRISP_SENDER_NAME'
    ]
    
    print("üìã Environment Variables:")
    all_present = True
    
    for var in required_vars:
        value = env_vars.get(var, os.getenv(var))
        if value:
            if 'PASSWORD' in var:
                print(f"   {var}: {'*' * len(value)}")
            else:
                print(f"   {var}: {value}")
        else:
            print(f"   {var}: ‚ùå NOT SET")
            all_present = False
    
    if all_present:
        print("‚úÖ All required environment variables are configured")
        return True
    else:
        print("‚ùå Some required environment variables are missing")
        return False


def test_gmail_smtp_connection():
    """Test SMTP connection to Gmail without sending email."""
    print("\nüß™ Testing Gmail SMTP Connection...")
    
    email_host = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
    email_port = int(os.getenv('EMAIL_PORT', '587'))
    email_user = os.getenv('EMAIL_HOST_USER')
    email_password = os.getenv('EMAIL_HOST_PASSWORD')
    
    if not email_user or not email_password:
        print("‚ùå Email credentials not configured")
        return False
    
    try:
        print(f"üîå Connecting to {email_host}:{email_port}...")
        
        # Create SMTP connection
        server = smtplib.SMTP(email_host, email_port)
        server.starttls()  # Enable TLS encryption
        
        print("üîê TLS encryption enabled")
        
        # Login to verify credentials
        server.login(email_user, email_password)
        print("‚úÖ Gmail SMTP authentication successful")
        
        # Close connection
        server.quit()
        print("üîö SMTP connection closed")
        
        return True
        
    except smtplib.SMTPAuthenticationError as e:
        print(f"‚ùå Gmail authentication failed: {e}")
        print("üí° Check your app password and 2FA settings")
        return False
    except smtplib.SMTPException as e:
        print(f"‚ùå SMTP error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Connection error: {e}")
        return False


def test_send_gmail_test_email():
    """Send a test email using Gmail SMTP."""
    print("\nüß™ Testing Gmail Email Sending...")
    
    email_host = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
    email_port = int(os.getenv('EMAIL_PORT', '587'))
    email_user = os.getenv('EMAIL_HOST_USER')
    email_password = os.getenv('EMAIL_HOST_PASSWORD')
    sender_email = os.getenv('CRISP_SENDER_EMAIL')
    sender_name = os.getenv('CRISP_SENDER_NAME', 'CRISP Platform')
    
    # Send test email to the same Gmail account
    recipient = os.getenv('DEFAULT_ADMIN_EMAIL', email_user)
    
    if not all([email_user, email_password, sender_email]):
        print("‚ùå Required email configuration missing")
        return False
    
    try:
        # Create message
        message = MIMEMultipart("alternative")
        message["Subject"] = "CRISP Gmail Integration Test"
        message["From"] = f"{sender_name} <{sender_email}>"
        message["To"] = recipient
        
        # Create text version
        text = f"""
CRISP Gmail Integration Test

This is a test email to verify that the CRISP threat intelligence platform
can successfully send email notifications using Gmail SMTP.

Configuration Tested:
- Gmail SMTP Host: {email_host}
- Gmail SMTP Port: {email_port}
- Sender Email: {sender_email}
- Sender Name: {sender_name}

Timestamp: {__import__('datetime').datetime.now().isoformat()}

This email was automatically generated by the CRISP Gmail integration test.

---
CRISP - Cyber Risk Information Sharing Platform
"""
        
        # Create HTML version
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>CRISP Gmail Integration Test</title>
        </head>
        <body style="font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5;">
            <div style="max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                <div style="background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); color: white; padding: 20px; border-radius: 5px; text-align: center; margin-bottom: 20px;">
                    <h1>üß™ CRISP Gmail Integration Test</h1>
                    <p>Threat Intelligence Platform Email Testing</p>
                </div>
                <div style="padding: 20px 0;">
                    <p>This is a test email to verify that the CRISP threat intelligence platform can successfully send email notifications using Gmail SMTP.</p>
                    
                    <h3>Configuration Tested:</h3>
                    <ul>
                        <li><strong>Gmail SMTP Host:</strong> {email_host}</li>
                        <li><strong>Gmail SMTP Port:</strong> {email_port}</li>
                        <li><strong>Sender Email:</strong> {sender_email}</li>
                        <li><strong>Sender Name:</strong> {sender_name}</li>
                    </ul>
                    
                    <p><strong>Timestamp:</strong> {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
                    
                    <p style="background-color: #d4edda; color: #155724; padding: 10px; border-radius: 5px;">
                        ‚úÖ <strong>Success!</strong> If you are reading this email, the CRISP Gmail integration is working correctly.
                    </p>
                </div>
                <div style="text-align: center; color: #6c757d; font-size: 0.9em; margin-top: 20px; padding-top: 20px; border-top: 1px solid #dee2e6;">
                    <p>CRISP - Cyber Risk Information Sharing Platform</p>
                    <p>This email was automatically generated by the CRISP Gmail integration test.</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        # Convert to MIMEText objects
        part1 = MIMEText(text, "plain")
        part2 = MIMEText(html, "html")
        
        # Add parts to message
        message.attach(part1)
        message.attach(part2)
        
        print(f"üì§ Sending test email to: {recipient}")
        print(f"üì§ From: {sender_name} <{sender_email}>")
        
        # Send email
        context = ssl.create_default_context()
        with smtplib.SMTP(email_host, email_port) as server:
            server.starttls(context=context)
            server.login(email_user, email_password)
            server.sendmail(sender_email, recipient, message.as_string())
        
        print("‚úÖ Test email sent successfully!")
        print(f"üì¨ Check your inbox at: {recipient}")
        return True
        
    except Exception as e:
        print(f"‚ùå Failed to send test email: {e}")
        return False


def create_django_email_test():
    """Create a Django management command for testing email."""
    print("\nüß™ Creating Django Email Test Command...")
    
    django_command_content = '''
"""
Django management command to test Gmail email integration.
Usage: python manage.py test_gmail_email
"""

from django.core.management.base import BaseCommand
from django.core.mail import send_mail, EmailMultiAlternatives
from django.conf import settings
import os


class Command(BaseCommand):
    help = 'Test Gmail email integration with CRISP observer system'
    
    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('Testing Gmail Email Integration...'))
        
        try:
            sender_email = os.getenv('CRISP_SENDER_EMAIL')
            sender_name = os.getenv('CRISP_SENDER_NAME', 'CRISP Platform')
            recipient = os.getenv('DEFAULT_ADMIN_EMAIL', os.getenv('EMAIL_HOST_USER'))
            
            subject = "CRISP Django Gmail Test"
            text_message = "This is a test email from CRISP Django application using Gmail SMTP."
            html_message = f"""
            <html>
            <body>
                <h2>CRISP Django Gmail Test</h2>
                <p>This is a test email from CRISP Django application using Gmail SMTP.</p>
                <p><strong>Configuration:</strong></p>
                <ul>
                    <li>Email Host: {settings.EMAIL_HOST}</li>
                    <li>Email Port: {settings.EMAIL_PORT}</li>
                    <li>Use TLS: {settings.EMAIL_USE_TLS}</li>
                    <li>Host User: {settings.EMAIL_HOST_USER}</li>
                </ul>
                <p style="color: green;"><strong>‚úÖ Django Gmail integration working!</strong></p>
            </body>
            </html>
            """
            
            # Send HTML email
            msg = EmailMultiAlternatives(
                subject=subject,
                body=text_message,
                from_email=f"{sender_name} <{sender_email}>",
                to=[recipient]
            )
            msg.attach_alternative(html_message, "text/html")
            
            result = msg.send()
            
            if result:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ Test email sent successfully to {recipient}')
                )
            else:
                self.stdout.write(
                    self.style.ERROR('‚ùå Failed to send email')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error: {e}')
            )
'''
    
    # Create management command directory
    command_dir = Path(__file__).parent / 'crisp' / 'crisp_threat_intel' / 'management' / 'commands'
    command_dir.mkdir(parents=True, exist_ok=True)
    
    # Write command file
    command_file = command_dir / 'test_gmail_email.py'
    with open(command_file, 'w') as f:
        f.write(django_command_content)
    
    print(f"‚úÖ Django email test command created: {command_file}")
    print("üìã To run with Django: python manage.py test_gmail_email")
    return True


def main():
    """Run all Gmail configuration tests."""
    print("=" * 70)
    print("üìß CRISP GMAIL CONFIGURATION TEST")
    print("=" * 70)
    
    all_passed = True
    
    # Test 1: Environment configuration
    if not test_env_configuration():
        all_passed = False
    
    # Test 2: SMTP connection
    if not test_gmail_smtp_connection():
        all_passed = False
    
    # Test 3: Send test email
    print("\nüì§ Sending test email automatically...")
    if not test_send_gmail_test_email():
        all_passed = False
    
    # Test 4: Create Django test command
    create_django_email_test()
    
    print("\n" + "=" * 70)
    print("üìä GMAIL CONFIGURATION TEST SUMMARY")
    print("=" * 70)
    
    if all_passed:
        print("‚úÖ GMAIL CONFIGURATION SUCCESSFUL!")
        print("üéâ Your Gmail integration is properly configured")
        
        print("\nüìß Configuration Summary:")
        print(f"   ‚Ä¢ Gmail SMTP Host: {os.getenv('EMAIL_HOST')}")
        print(f"   ‚Ä¢ Gmail SMTP Port: {os.getenv('EMAIL_PORT')}")
        print(f"   ‚Ä¢ TLS Encryption: Enabled")
        print(f"   ‚Ä¢ From Email: {os.getenv('CRISP_SENDER_EMAIL')}")
        print(f"   ‚Ä¢ From Name: {os.getenv('CRISP_SENDER_NAME')}")
        print(f"   ‚Ä¢ Test Recipient: {os.getenv('DEFAULT_ADMIN_EMAIL', os.getenv('EMAIL_HOST_USER'))}")
        
        print("\nüöÄ Next Steps:")
        print("   1. Run Django application: cd crisp && python manage.py runserver")
        print("   2. Test Django email: python manage.py test_gmail_email")
        print("   3. Test observer system: python test_observer_integration.py")
        
    else:
        print("‚ùå GMAIL CONFIGURATION ISSUES DETECTED!")
        print("üîß Please check the following:")
        print("   1. Gmail app password is correct (not your regular password)")
        print("   2. 2-factor authentication is enabled on your Gmail account")
        print("   3. App passwords are enabled in your Google account settings")
        print("   4. Environment variables are correctly set in .env file")
        
    return all_passed


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)