# Generated by Django 4.2.10 on 2025-06-25 23:24

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("viewer", "Viewer"),
                            ("publisher", "Publisher"),
                            ("BlueVisionAdmin", "BlueVision Admin"),
                        ],
                        default="viewer",
                        help_text="User's role within the organization",
                        max_length=50,
                    ),
                ),
                (
                    "is_publisher",
                    models.BooleanField(
                        default=False,
                        help_text="Whether user can publish threat intelligence feeds",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether user account has been verified by admin",
                    ),
                ),
                (
                    "failed_login_attempts",
                    models.IntegerField(
                        default=0,
                        help_text="Number of consecutive failed login attempts",
                    ),
                ),
                (
                    "last_failed_login",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp of last failed login attempt",
                        null=True,
                    ),
                ),
                (
                    "account_locked_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="Account locked until this timestamp",
                        null=True,
                    ),
                ),
                (
                    "password_reset_token",
                    models.CharField(
                        blank=True,
                        help_text="Token for password reset",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "password_reset_expires",
                    models.DateTimeField(
                        blank=True,
                        help_text="Expiration time for password reset token",
                        null=True,
                    ),
                ),
                (
                    "two_factor_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Whether two-factor authentication is enabled",
                    ),
                ),
                (
                    "trusted_devices",
                    models.JSONField(
                        default=list, help_text="List of trusted device fingerprints"
                    ),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address of last successful login",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "CRISP User",
                "verbose_name_plural": "CRISP Users",
                "ordering": ["username"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AuthenticationLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Username (stored even if user is deleted)",
                        max_length=150,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("login_success", "Login Success"),
                            ("login_failed", "Login Failed"),
                            ("logout", "Logout"),
                            ("password_reset", "Password Reset"),
                            ("password_reset_confirm", "Password Reset Confirmed"),
                            ("password_changed", "Password Changed"),
                            ("account_locked", "Account Locked"),
                            ("account_unlocked", "Account Unlocked"),
                            ("token_refresh", "Token Refresh"),
                            ("trusted_device_added", "Trusted Device Added"),
                            ("trusted_device_removed", "Trusted Device Removed"),
                            ("session_expired", "Session Expired"),
                            ("user_created", "User Created"),
                            ("user_updated", "User Updated"),
                            ("user_deleted", "User Deleted"),
                        ],
                        help_text="Type of authentication action",
                        max_length=50,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        help_text="IP address from which action was performed"
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(help_text="Browser/client user agent string"),
                ),
                (
                    "success",
                    models.BooleanField(help_text="Whether the action was successful"),
                ),
                (
                    "failure_reason",
                    models.CharField(
                        blank=True,
                        help_text="Reason for failure if action was unsuccessful",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this action occurred"
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        default=dict, help_text="Additional context data for the action"
                    ),
                ),
            ],
            options={
                "verbose_name": "Authentication Log",
                "verbose_name_plural": "Authentication Logs",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Collection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("alias", models.SlugField(unique=True)),
                ("can_read", models.BooleanField(default=True)),
                ("can_write", models.BooleanField(default=False)),
                ("media_types", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "default_anonymization",
                    models.CharField(default="partial", max_length=50),
                ),
            ],
            options={
                "db_table": "core_collection",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CollectionObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("added_at", models.DateTimeField(auto_now_add=True)),
                ("version_at_addition", models.DateTimeField()),
            ],
            options={
                "db_table": "core_collectionobject",
                "ordering": ["-added_at"],
            },
        ),
        migrations.CreateModel(
            name="Feed",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("is_public", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("_observers", models.JSONField(default=list, editable=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "core_feed",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Identity",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("identity_class", models.CharField(max_length=100)),
                ("sectors", models.JSONField(default=list)),
                ("contact_information", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name_plural": "Identities",
                "db_table": "core_identity",
            },
        ),
        migrations.CreateModel(
            name="Indicator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("ip", "IP Address"),
                            ("domain", "Domain Name"),
                            ("url", "URL"),
                            ("file_hash", "File Hash"),
                            ("email", "Email Address"),
                            ("user_agent", "User Agent"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("value", models.TextField()),
                (
                    "hash_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("md5", "MD5"),
                            ("sha1", "SHA-1"),
                            ("sha256", "SHA-256"),
                            ("other", "Other"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("first_seen", models.DateTimeField(blank=True, null=True)),
                ("last_seen", models.DateTimeField(blank=True, null=True)),
                (
                    "stix_id",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("confidence", models.IntegerField(default=50)),
                ("description", models.TextField(blank=True, null=True)),
                ("is_anonymized", models.BooleanField(default=False)),
                ("original_value", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "indicators",
            },
        ),
        migrations.CreateModel(
            name="Institution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "contact_email",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
                (
                    "contact_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "institutions",
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Organization name", max_length=255, unique=True
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Organization description"),
                ),
                (
                    "domain",
                    models.CharField(
                        help_text="Organization email domain",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "identity_class",
                    models.CharField(
                        default="organization",
                        help_text="STIX identity class",
                        max_length=100,
                    ),
                ),
                (
                    "sectors",
                    models.JSONField(
                        blank=True, default=list, help_text="Industry sectors (STIX)"
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True, help_text="Contact email", max_length=254
                    ),
                ),
                (
                    "website",
                    models.URLField(blank=True, help_text="Organization website"),
                ),
                (
                    "stix_id",
                    models.CharField(
                        blank=True,
                        help_text="STIX identity ID",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether organization is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Organization",
                "verbose_name_plural": "Organizations",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SharingPolicy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the sharing policy",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of what this policy controls"
                    ),
                ),
                (
                    "allowed_stix_types",
                    models.JSONField(
                        default=list,
                        help_text="List of STIX object types that can be shared",
                    ),
                ),
                (
                    "blocked_stix_types",
                    models.JSONField(
                        default=list,
                        help_text="List of STIX object types that are blocked",
                    ),
                ),
                (
                    "allowed_indicator_types",
                    models.JSONField(
                        default=list,
                        help_text="List of indicator types that can be shared",
                    ),
                ),
                (
                    "blocked_indicator_types",
                    models.JSONField(
                        default=list,
                        help_text="List of indicator types that are blocked",
                    ),
                ),
                (
                    "max_tlp_level",
                    models.CharField(
                        choices=[
                            ("white", "TLP:WHITE"),
                            ("green", "TLP:GREEN"),
                            ("amber", "TLP:AMBER"),
                            ("red", "TLP:RED"),
                        ],
                        default="green",
                        help_text="Maximum TLP level that can be shared",
                        max_length=20,
                    ),
                ),
                (
                    "max_age_days",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum age of intelligence that can be shared (in days)",
                        null=True,
                    ),
                ),
                (
                    "require_anonymization",
                    models.BooleanField(
                        default=True, help_text="Whether anonymization is required"
                    ),
                ),
                (
                    "anonymization_rules",
                    models.JSONField(
                        default=dict, help_text="Specific anonymization rules to apply"
                    ),
                ),
                (
                    "allow_attribution",
                    models.BooleanField(
                        default=False,
                        help_text="Whether attribution to source organization is allowed",
                    ),
                ),
                (
                    "additional_constraints",
                    models.JSONField(
                        default=dict, help_text="Additional policy constraints"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this policy is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.CharField(
                        help_text="User who created this policy", max_length=255
                    ),
                ),
            ],
            options={
                "verbose_name": "Sharing Policy",
                "verbose_name_plural": "Sharing Policies",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="STIXObject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("stix_id", models.CharField(max_length=255, unique=True)),
                (
                    "stix_type",
                    models.CharField(
                        choices=[
                            ("indicator", "Indicator"),
                            ("malware", "Malware"),
                            ("attack-pattern", "Attack Pattern"),
                            ("threat-actor", "Threat Actor"),
                            ("identity", "Identity"),
                            ("relationship", "Relationship"),
                            ("tool", "Tool"),
                            ("vulnerability", "Vulnerability"),
                            ("observed-data", "Observed Data"),
                            ("report", "Report"),
                            ("course-of-action", "Course of Action"),
                            ("campaign", "Campaign"),
                            ("intrusion-set", "Intrusion Set"),
                            ("infrastructure", "Infrastructure"),
                            ("location", "Location"),
                            ("note", "Note"),
                            ("opinion", "Opinion"),
                            ("marking-definition", "Marking Definition"),
                        ],
                        max_length=100,
                    ),
                ),
                ("spec_version", models.CharField(default="2.1", max_length=20)),
                ("created", models.DateTimeField()),
                ("modified", models.DateTimeField()),
                (
                    "created_by_ref",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("revoked", models.BooleanField(default=False)),
                ("labels", models.JSONField(default=list)),
                ("confidence", models.IntegerField(default=0)),
                ("external_references", models.JSONField(default=list)),
                ("object_marking_refs", models.JSONField(default=list)),
                ("granular_markings", models.JSONField(default=list)),
                ("raw_data", models.JSONField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("anonymized", models.BooleanField(default=False)),
                (
                    "anonymization_strategy",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "original_object_ref",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "core_stixobject",
            },
        ),
        migrations.CreateModel(
            name="STIXObjectPermission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "stix_object_id",
                    models.UUIDField(
                        help_text="ID of the STIX object (references crisp_threat_intel.STIXObject)"
                    ),
                ),
                (
                    "permission_level",
                    models.CharField(
                        choices=[
                            ("read", "Read"),
                            ("write", "Write"),
                            ("admin", "Admin"),
                        ],
                        help_text="Level of permission for this STIX object",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this permission expires (null = never)",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "STIX Object Permission",
                "verbose_name_plural": "STIX Object Permissions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ThreatFeed",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_public", models.BooleanField(default=False)),
                (
                    "taxii_collection_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("taxii_server_url", models.URLField(blank=True, null=True)),
                (
                    "taxii_api_root",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "taxii_username",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "taxii_password",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("last_sync", models.DateTimeField(blank=True, null=True)),
                ("is_external", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "threat_feeds",
            },
        ),
        migrations.CreateModel(
            name="TrustGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the trust group", max_length=255, unique=True
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of the trust group's purpose"
                    ),
                ),
                (
                    "group_type",
                    models.CharField(
                        default="community",
                        help_text="Type of trust group (sector, geography, purpose, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether organizations can request to join publicly",
                    ),
                ),
                (
                    "requires_approval",
                    models.BooleanField(
                        default=True, help_text="Whether membership requires approval"
                    ),
                ),
                (
                    "group_policies",
                    models.JSONField(
                        default=dict,
                        help_text="Group-specific sharing and access policies",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this trust group is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.CharField(
                        help_text="Organization that created this group", max_length=255
                    ),
                ),
                (
                    "administrators",
                    models.JSONField(
                        default=list,
                        help_text="List of organization IDs that can administer this group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Trust Group",
                "verbose_name_plural": "Trust Groups",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TrustGroupMembership",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "membership_type",
                    models.CharField(
                        choices=[
                            ("member", "Member"),
                            ("administrator", "Administrator"),
                            ("moderator", "Moderator"),
                        ],
                        default="member",
                        help_text="Type of membership in the group",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this membership is active"
                    ),
                ),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                (
                    "left_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the organization left the group",
                        null=True,
                    ),
                ),
                (
                    "invited_by",
                    models.CharField(
                        blank=True,
                        help_text="Organization that invited this member",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "approved_by",
                    models.CharField(
                        blank=True,
                        help_text="Administrator who approved this membership",
                        max_length=255,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Trust Group Membership",
                "verbose_name_plural": "Trust Group Memberships",
                "ordering": ["-joined_at"],
            },
        ),
        migrations.CreateModel(
            name="TrustLevel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Unique name for this trust level",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("none", "No Trust"),
                            ("low", "Low Trust"),
                            ("medium", "Medium Trust"),
                            ("high", "High Trust"),
                            ("complete", "Complete Trust"),
                        ],
                        help_text="Standard trust level classification",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of what this trust level means"
                    ),
                ),
                (
                    "numerical_value",
                    models.IntegerField(
                        help_text="Numerical representation for comparison (0-100)"
                    ),
                ),
                (
                    "default_anonymization_level",
                    models.CharField(
                        choices=[
                            ("none", "No Anonymization"),
                            ("minimal", "Minimal Anonymization"),
                            ("partial", "Partial Anonymization"),
                            ("full", "Full Anonymization"),
                            ("custom", "Custom Anonymization"),
                        ],
                        default="partial",
                        help_text="Default anonymization level for this trust level",
                        max_length=20,
                    ),
                ),
                (
                    "default_access_level",
                    models.CharField(
                        choices=[
                            ("none", "No Access"),
                            ("read", "Read Only"),
                            ("subscribe", "Subscribe to Feeds"),
                            ("contribute", "Contribute Intelligence"),
                            ("full", "Full Access"),
                        ],
                        default="read",
                        help_text="Default access level for this trust level",
                        max_length=20,
                    ),
                ),
                (
                    "sharing_policies",
                    models.JSONField(
                        default=dict,
                        help_text="Detailed sharing policies and restrictions",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this trust level is currently active",
                    ),
                ),
                (
                    "is_system_default",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a system default trust level",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.CharField(
                        help_text="System user who created this trust level",
                        max_length=255,
                    ),
                ),
            ],
            options={
                "verbose_name": "Trust Level",
                "verbose_name_plural": "Trust Levels",
                "ordering": ["numerical_value"],
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "session_token",
                    models.CharField(
                        help_text="JWT access token", max_length=500, unique=True
                    ),
                ),
                (
                    "refresh_token",
                    models.CharField(
                        blank=True,
                        help_text="JWT refresh token",
                        max_length=500,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "device_info",
                    models.JSONField(
                        default=dict, help_text="Browser and device information"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(help_text="IP address of the session"),
                ),
                (
                    "is_trusted_device",
                    models.BooleanField(
                        default=False, help_text="Whether this is a trusted device"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(help_text="When this session expires"),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        auto_now=True, help_text="Last activity timestamp"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether session is still active"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Session",
                "verbose_name_plural": "User Sessions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TTPData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "mitre_tactic",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("reconnaissance", "Reconnaissance"),
                            ("resource_development", "Resource Development"),
                            ("initial_access", "Initial Access"),
                            ("execution", "Execution"),
                            ("persistence", "Persistence"),
                            ("privilege_escalation", "Privilege Escalation"),
                            ("defense_evasion", "Defense Evasion"),
                            ("credential_access", "Credential Access"),
                            ("discovery", "Discovery"),
                            ("lateral_movement", "Lateral Movement"),
                            ("collection", "Collection"),
                            ("command_and_control", "Command and Control"),
                            ("exfiltration", "Exfiltration"),
                            ("impact", "Impact"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "mitre_technique_id",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "stix_id",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("is_anonymized", models.BooleanField(default=False)),
                (
                    "threat_feed",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ttp_data",
                        to="core.threatfeed",
                    ),
                ),
            ],
            options={
                "db_table": "ttp_data",
            },
        ),
        migrations.CreateModel(
            name="TrustRelationship",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "relationship_type",
                    models.CharField(
                        choices=[
                            ("bilateral", "Bilateral Trust"),
                            ("community", "Community Trust"),
                            ("hierarchical", "Hierarchical Trust"),
                            ("federation", "Federation Trust"),
                        ],
                        default="bilateral",
                        help_text="Type of trust relationship",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("active", "Active"),
                            ("suspended", "Suspended"),
                            ("revoked", "Revoked"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        help_text="Current status of the trust relationship",
                        max_length=20,
                    ),
                ),
                (
                    "is_bilateral",
                    models.BooleanField(
                        default=True,
                        help_text="Whether trust is mutual (both directions)",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this relationship is currently active",
                    ),
                ),
                (
                    "valid_from",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When this trust relationship becomes valid",
                    ),
                ),
                (
                    "valid_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this trust relationship expires (null = never)",
                        null=True,
                    ),
                ),
                (
                    "sharing_preferences",
                    models.JSONField(
                        default=dict,
                        help_text="Organization-specific sharing preferences",
                    ),
                ),
                (
                    "anonymization_level",
                    models.CharField(
                        choices=[
                            ("none", "No Anonymization"),
                            ("minimal", "Minimal Anonymization"),
                            ("partial", "Partial Anonymization"),
                            ("full", "Full Anonymization"),
                            ("custom", "Custom Anonymization"),
                        ],
                        help_text="Level of anonymization to apply",
                        max_length=20,
                    ),
                ),
                (
                    "access_level",
                    models.CharField(
                        choices=[
                            ("none", "No Access"),
                            ("read", "Read Only"),
                            ("subscribe", "Subscribe to Feeds"),
                            ("contribute", "Contribute Intelligence"),
                            ("full", "Full Access"),
                        ],
                        default="read",
                        help_text="Access level granted by this relationship",
                        max_length=20,
                    ),
                ),
                (
                    "approved_by_source",
                    models.BooleanField(
                        default=False,
                        help_text="Whether source organization has approved",
                    ),
                ),
                (
                    "approved_by_target",
                    models.BooleanField(
                        default=False,
                        help_text="Whether target organization has approved",
                    ),
                ),
                (
                    "approved_by_source_user",
                    models.CharField(
                        blank=True,
                        help_text="User who approved on behalf of source organization",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "approved_by_target_user",
                    models.CharField(
                        blank=True,
                        help_text="User who approved on behalf of target organization",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        default=dict,
                        help_text="Additional metadata about the relationship",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Notes about this trust relationship"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "activated_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this relationship was activated",
                        null=True,
                    ),
                ),
                (
                    "revoked_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this relationship was revoked",
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.CharField(
                        help_text="User who created this relationship", max_length=255
                    ),
                ),
                (
                    "last_modified_by",
                    models.CharField(
                        help_text="User who last modified this relationship",
                        max_length=255,
                    ),
                ),
                (
                    "revoked_by",
                    models.CharField(
                        blank=True,
                        help_text="User who revoked this relationship",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "source_organization",
                    models.ForeignKey(
                        help_text="The organization initiating the trust relationship",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="initiated_trust_relationships",
                        to="core.organization",
                    ),
                ),
                (
                    "target_organization",
                    models.ForeignKey(
                        help_text="The organization receiving the trust relationship",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_trust_relationships",
                        to="core.organization",
                    ),
                ),
                (
                    "trust_group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Trust group if this is a community relationship",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_relationships",
                        to="core.trustgroup",
                    ),
                ),
                (
                    "trust_level",
                    models.ForeignKey(
                        help_text="Trust level for this relationship",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trust_relationships",
                        to="core.trustlevel",
                    ),
                ),
            ],
            options={
                "verbose_name": "Trust Relationship",
                "verbose_name_plural": "Trust Relationships",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TrustLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("relationship_created", "Trust Relationship Created"),
                            ("relationship_approved", "Trust Relationship Approved"),
                            ("relationship_activated", "Trust Relationship Activated"),
                            ("relationship_suspended", "Trust Relationship Suspended"),
                            ("relationship_revoked", "Trust Relationship Revoked"),
                            ("relationship_modified", "Trust Relationship Modified"),
                            ("group_created", "Trust Group Created"),
                            ("group_modified", "Trust Group Modified"),
                            ("group_joined", "Joined Trust Group"),
                            ("group_left", "Left Trust Group"),
                            ("access_granted", "Access Granted"),
                            ("access_denied", "Access Denied"),
                            ("intelligence_shared", "Intelligence Shared"),
                            ("intelligence_accessed", "Intelligence Accessed"),
                            ("trust_level_modified", "Trust Level Modified"),
                        ],
                        help_text="Type of trust action performed",
                        max_length=50,
                    ),
                ),
                (
                    "user",
                    models.CharField(
                        help_text="User who performed the action", max_length=255
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address from which action was performed",
                        null=True,
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="User agent string", null=True
                    ),
                ),
                (
                    "success",
                    models.BooleanField(
                        default=True, help_text="Whether the action was successful"
                    ),
                ),
                (
                    "failure_reason",
                    models.CharField(
                        blank=True,
                        help_text="Reason for failure if action was unsuccessful",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "details",
                    models.JSONField(
                        default=dict, help_text="Additional details about the action"
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "source_organization",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization that initiated the action",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="initiated_trust_logs",
                        to="core.organization",
                    ),
                ),
                (
                    "target_organization",
                    models.ForeignKey(
                        blank=True,
                        help_text="Target organization (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="received_trust_logs",
                        to="core.organization",
                    ),
                ),
                (
                    "trust_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="trust_logs",
                        to="core.trustgroup",
                    ),
                ),
                (
                    "trust_relationship",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="trust_logs",
                        to="core.trustrelationship",
                    ),
                ),
            ],
            options={
                "verbose_name": "Trust Log",
                "verbose_name_plural": "Trust Logs",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.AddIndex(
            model_name="trustlevel",
            index=models.Index(fields=["level"], name="core_trustl_level_81bc6f_idx"),
        ),
        migrations.AddIndex(
            model_name="trustlevel",
            index=models.Index(
                fields=["numerical_value"], name="core_trustl_numeric_c21783_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="trustlevel",
            index=models.Index(
                fields=["is_active"], name="core_trustl_is_acti_6ab25b_idx"
            ),
        ),
        migrations.AddField(
            model_name="trustgroupmembership",
            name="organization",
            field=models.ForeignKey(
                help_text="Organization that is a member of the trust group",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="trust_group_memberships",
                to="core.organization",
            ),
        ),
        migrations.AddField(
            model_name="trustgroupmembership",
            name="trust_group",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="group_memberships",
                to="core.trustgroup",
            ),
        ),
        migrations.AddField(
            model_name="trustgroup",
            name="default_trust_level",
            field=models.ForeignKey(
                help_text="Default trust level for group members",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="default_for_groups",
                to="core.trustlevel",
            ),
        ),
        migrations.AddField(
            model_name="threatfeed",
            name="owner",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="owned_feeds",
                to="core.organization",
            ),
        ),
        migrations.AddField(
            model_name="stixobjectpermission",
            name="granted_by",
            field=models.ForeignKey(
                help_text="User who granted this permission",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="granted_permissions",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="stixobjectpermission",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="stix_permissions",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="stixobject",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created_stix_objects",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="stixobject",
            name="source_organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="stix_objects",
                to="core.organization",
            ),
        ),
        migrations.AddField(
            model_name="indicator",
            name="threat_feed",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="indicators",
                to="core.threatfeed",
            ),
        ),
        migrations.AddField(
            model_name="identity",
            name="stix_object",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="identity_details",
                to="core.stixobject",
            ),
        ),
        migrations.AddField(
            model_name="feed",
            name="owner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="feeds",
                to="core.organization",
            ),
        ),
        migrations.AddField(
            model_name="feed",
            name="taxii_collection",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="core.collection",
            ),
        ),
        migrations.AddField(
            model_name="collectionobject",
            name="added_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="collectionobject",
            name="collection",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.collection"
            ),
        ),
        migrations.AddField(
            model_name="collectionobject",
            name="stix_object",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.stixobject"
            ),
        ),
        migrations.AddField(
            model_name="collection",
            name="owner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="owned_collections",
                to="core.organization",
            ),
        ),
        migrations.AddField(
            model_name="collection",
            name="stix_objects",
            field=models.ManyToManyField(
                related_name="collections",
                through="core.CollectionObject",
                to="core.stixobject",
            ),
        ),
        migrations.AddField(
            model_name="authenticationlog",
            name="user",
            field=models.ForeignKey(
                blank=True,
                help_text="User associated with this log entry",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="auth_logs",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="organization",
            field=models.ForeignKey(
                help_text="Organization this user belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="users",
                to="core.organization",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddIndex(
            model_name="ttpdata",
            index=models.Index(
                fields=["mitre_technique_id"], name="ttp_data_mitre_t_90a5f9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ttpdata",
            index=models.Index(fields=["stix_id"], name="ttp_data_stix_id_742074_idx"),
        ),
        migrations.AddIndex(
            model_name="trustrelationship",
            index=models.Index(
                fields=["source_organization"], name="core_trustr_source__dd6c5d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="trustrelationship",
            index=models.Index(
                fields=["target_organization"], name="core_trustr_target__01f715_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="trustrelationship",
            index=models.Index(fields=["status"], name="core_trustr_status_ef3968_idx"),
        ),
        migrations.AddIndex(
            model_name="trustrelationship",
            index=models.Index(
                fields=["trust_level"], name="core_trustr_trust_l_0a5e2d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="trustrelationship",
            index=models.Index(
                fields=["is_active"], name="core_trustr_is_acti_4eedc9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="trustrelationship",
            index=models.Index(
                fields=["valid_from"], name="core_trustr_valid_f_b31430_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="trustrelationship",
            index=models.Index(
                fields=["valid_until"], name="core_trustr_valid_u_4e8e35_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="trustrelationship",
            unique_together={("source_organization", "target_organization")},
        ),
        migrations.AddIndex(
            model_name="trustlog",
            index=models.Index(
                fields=["action", "-timestamp"], name="core_trustl_action_df7bb7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="trustlog",
            index=models.Index(
                fields=["source_organization", "-timestamp"],
                name="core_trustl_source__393f8c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="trustlog",
            index=models.Index(
                fields=["target_organization", "-timestamp"],
                name="core_trustl_target__a3670d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="trustlog",
            index=models.Index(
                fields=["user", "-timestamp"], name="core_trustl_user_ab2fa7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="trustlog",
            index=models.Index(
                fields=["success", "-timestamp"], name="core_trustl_success_29abd6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="trustgroupmembership",
            index=models.Index(
                fields=["organization"], name="core_trustg_organiz_d46c83_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="trustgroupmembership",
            index=models.Index(
                fields=["is_active"], name="core_trustg_is_acti_3316d7_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="trustgroupmembership",
            unique_together={("trust_group", "organization")},
        ),
        migrations.AddIndex(
            model_name="trustgroup",
            index=models.Index(
                fields=["group_type"], name="core_trustg_group_t_0962c8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="trustgroup",
            index=models.Index(
                fields=["is_public"], name="core_trustg_is_publ_f78ae8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="trustgroup",
            index=models.Index(
                fields=["is_active"], name="core_trustg_is_acti_a012dd_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="stixobjectpermission",
            unique_together={("user", "stix_object_id")},
        ),
        migrations.AddIndex(
            model_name="stixobject",
            index=models.Index(
                fields=["stix_type"], name="core_stixob_stix_ty_2dce34_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="stixobject",
            index=models.Index(
                fields=["created"], name="core_stixob_created_26f121_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="stixobject",
            index=models.Index(
                fields=["modified"], name="core_stixob_modifie_36f639_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="stixobject",
            index=models.Index(
                fields=["created_by_ref"], name="core_stixob_created_c709a7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="stixobject",
            index=models.Index(
                fields=["anonymized"], name="core_stixob_anonymi_b28775_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="indicator",
            index=models.Index(
                fields=["type", "value"], name="indicators_type_514693_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="indicator",
            index=models.Index(
                fields=["stix_id"], name="indicators_stix_id_2b0296_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="collectionobject",
            unique_together={("collection", "stix_object")},
        ),
        migrations.AddIndex(
            model_name="authenticationlog",
            index=models.Index(
                fields=["username", "-timestamp"], name="core_authen_usernam_72f595_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="authenticationlog",
            index=models.Index(
                fields=["action", "-timestamp"], name="core_authen_action_2ee47a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="authenticationlog",
            index=models.Index(
                fields=["ip_address", "-timestamp"],
                name="core_authen_ip_addr_e1333b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="authenticationlog",
            index=models.Index(
                fields=["success", "-timestamp"], name="core_authen_success_8a2b3a_idx"
            ),
        ),
    ]
