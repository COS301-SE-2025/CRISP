# Generated by Django 4.2.23 on 2025-06-23 17:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Organization name", max_length=255, unique=True
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Organization description"),
                ),
                (
                    "domain",
                    models.CharField(
                        help_text="Organization email domain",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether organization is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Organization",
                "verbose_name_plural": "Organizations",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("viewer", "Viewer"),
                            ("analyst", "Analyst"),
                            ("publisher", "Publisher"),
                            ("admin", "Administrator"),
                            ("system_admin", "System Administrator"),
                        ],
                        default="viewer",
                        help_text="User's role within the organization",
                        max_length=50,
                    ),
                ),
                (
                    "is_publisher",
                    models.BooleanField(
                        default=False,
                        help_text="Whether user can publish threat intelligence feeds",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether user account has been verified by admin",
                    ),
                ),
                (
                    "failed_login_attempts",
                    models.IntegerField(
                        default=0,
                        help_text="Number of consecutive failed login attempts",
                    ),
                ),
                (
                    "last_failed_login",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp of last failed login attempt",
                        null=True,
                    ),
                ),
                (
                    "account_locked_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="Account locked until this timestamp",
                        null=True,
                    ),
                ),
                (
                    "password_reset_token",
                    models.CharField(
                        blank=True,
                        help_text="Token for password reset",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "password_reset_expires",
                    models.DateTimeField(
                        blank=True,
                        help_text="Expiration time for password reset token",
                        null=True,
                    ),
                ),
                (
                    "two_factor_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Whether two-factor authentication is enabled",
                    ),
                ),
                (
                    "trusted_devices",
                    models.JSONField(
                        default=list, help_text="List of trusted device fingerprints"
                    ),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address of last successful login",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="Organization this user belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="users",
                        to="UserManagement.organization",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "CRISP User",
                "verbose_name_plural": "CRISP Users",
                "ordering": ["username"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "session_token",
                    models.CharField(
                        help_text="JWT access token", max_length=500, unique=True
                    ),
                ),
                (
                    "refresh_token",
                    models.CharField(
                        blank=True,
                        help_text="JWT refresh token",
                        max_length=500,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "device_info",
                    models.JSONField(
                        default=dict, help_text="Browser and device information"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(help_text="IP address of the session"),
                ),
                (
                    "is_trusted_device",
                    models.BooleanField(
                        default=False, help_text="Whether this is a trusted device"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(help_text="When this session expires"),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        auto_now=True, help_text="Last activity timestamp"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether session is still active"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Session",
                "verbose_name_plural": "User Sessions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="STIXObjectPermission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "stix_object_id",
                    models.UUIDField(
                        help_text="ID of the STIX object (references crisp_threat_intel.STIXObject)"
                    ),
                ),
                (
                    "permission_level",
                    models.CharField(
                        choices=[
                            ("read", "Read"),
                            ("write", "Write"),
                            ("admin", "Admin"),
                        ],
                        help_text="Level of permission for this STIX object",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this permission expires (null = never)",
                        null=True,
                    ),
                ),
                (
                    "granted_by",
                    models.ForeignKey(
                        help_text="User who granted this permission",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stix_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "STIX Object Permission",
                "verbose_name_plural": "STIX Object Permissions",
                "ordering": ["-created_at"],
                "unique_together": {("user", "stix_object_id")},
            },
        ),
        migrations.CreateModel(
            name="AuthenticationLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Username (stored even if user is deleted)",
                        max_length=150,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("login_success", "Login Success"),
                            ("login_failed", "Login Failed"),
                            ("logout", "Logout"),
                            ("password_reset", "Password Reset"),
                            ("password_reset_confirm", "Password Reset Confirmed"),
                            ("password_changed", "Password Changed"),
                            ("account_locked", "Account Locked"),
                            ("account_unlocked", "Account Unlocked"),
                            ("token_refresh", "Token Refresh"),
                            ("trusted_device_added", "Trusted Device Added"),
                            ("trusted_device_removed", "Trusted Device Removed"),
                            ("session_expired", "Session Expired"),
                            ("user_created", "User Created"),
                            ("user_updated", "User Updated"),
                            ("user_deleted", "User Deleted"),
                        ],
                        help_text="Type of authentication action",
                        max_length=50,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        help_text="IP address from which action was performed"
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(help_text="Browser/client user agent string"),
                ),
                (
                    "success",
                    models.BooleanField(help_text="Whether the action was successful"),
                ),
                (
                    "failure_reason",
                    models.CharField(
                        blank=True,
                        help_text="Reason for failure if action was unsuccessful",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this action occurred"
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        default=dict, help_text="Additional context data for the action"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User associated with this log entry",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="auth_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Authentication Log",
                "verbose_name_plural": "Authentication Logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["username", "-timestamp"],
                        name="UserManagem_usernam_d1f7bd_idx",
                    ),
                    models.Index(
                        fields=["action", "-timestamp"],
                        name="UserManagem_action_eaeff8_idx",
                    ),
                    models.Index(
                        fields=["ip_address", "-timestamp"],
                        name="UserManagem_ip_addr_428f69_idx",
                    ),
                    models.Index(
                        fields=["success", "-timestamp"],
                        name="UserManagem_success_bac2f7_idx",
                    ),
                ],
            },
        ),
    ]
