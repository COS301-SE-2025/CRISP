
Running the Application
Start the Django Development Server
The server will be available at http://127.0.0.1:8000/
Start the Celery Worker (for asynchronous feed consumption)
5. Set up the PostgreSQL database
sudo -u postgres psql
CREATE USER myuser WITH PASSWORD 'your_password';
CREATE DATABASE crisp;
GRANT ALL PRIVILEGES ON DATABASE crisp TO myuser;
\q
6. Apply migrations
python manage.py makemigrations core
python manage.py migrate
7. Create a superuser
python manage.py createsuperuser
python manage.py runserver
# Make sure Redis is running
Consuming Threat Intelligence Feeds
Setting Up a Feed through the Admin Interface
   - Navigate to http://127.0.0.1:8000/admin/
   - Go to "Institutions" and click "Add Institution"   - Fill in the details and save   - Go to "Threat feeds" and click "Add Threat feed"   - Fill in the details:     - Name: "AlienVault OTX Feed"     - Description: "External threat feed from AlienVault OTX"     - Owner: Select your institution     - Is External: Check this box     - TAXII Server URL: "https://otx.alienvault.com/taxii"
     - TAXII API Root: "taxii"     - TAXII Collection ID: "user_AlienVault"     - TAXII Username: Your OTX API key     - Is Public: Check if you want to share this feed   - Save the threat feed
redis-cli ping # Should return PONG
# Start Celery worker
celery -A crisp worker -l info
1. Create an Institution
2. Create a Threat Feed
Consuming the Feed via API
Start Consumption
Use the API endpoint to start the consumption process:
Advanced Options
Check Feed Status
This will show the number of indicators and TTPs, along with the last sync time.
# Process in batches of 100 with data from the last 7 days
curl -X POST "http://127.0.0.1:8000/api/threat-feeds/1/consume/?
force_days=7&batch_size=100"
# Process in batches of 100 with data from the last 30 days
curl -X POST "http://127.0.0.1:8000/api/threat-feeds/1/consume/?
force_days=30&batch_size=100"
# Process in the background (async mode)
curl -X POST "http://127.0.0.1:8000/api/threat-feeds/1/consume/?
force_days=7&batch_size=100&async=true"
# Limit the number of blocks to process (for testing)
curl -X POST "http://127.0.0.1:8000/api/threat-feeds/1/consume/?limit=10"
curl -X GET "http://127.0.0.1:8000/api/threat-feeds/1/status/"
Data Flow: Threat Intelligence Consumption
Testing the Feed Consumption
The test suite for the TAXII feed consumption covers multiple aspects:
Test Files Structure
Mock Data
Component Tests
Integration and End-to-End Tests
1. The system connects to external TAXII feeds (such as AlienVault OTX)
2. It retrieves STIX-formatted threat intelligence data (indicators and TTPs)
3. The data is processed in batches to manage memory usage
4. Each item is parsed, converted to CRISP entities, and stored in the database
5. The system avoids duplicates by checking STIX IDs
6. Processing statistics are tracked and reported
1. Mock Data - Simulated STIX/TAXII data for testing
2. Unit Tests - Individual component testing
3. Integration Tests - Testing components working together
4. End-to-End Tests - Testing the complete consumption process
test_stix_mock_data.py: Contains mock STIX 1.x (XML), STIX 2.0, and STIX 2.1 (JSON)
data for testing
test_stix1_parser.py: Tests for the STIX 1.x parser that processes XML content from
TAXII feeds
test_taxii_service.py: Tests for the TAXII service implementations (OTXTaxiiService
and StixTaxiiService)
test_stix_factory.py: Tests for the Factory pattern implementation (StixIndicatorCreator
and StixTTPCreator)
test_taxii_integration.py: Integration tests that verify the correct interaction between
different components
test_end_to_end.py: End-to-end tests that simulate the complete TAXII feed consumption
process
Running Tests
Basic Testing Commands
Running Specific Test Files
# Run all tests
python manage.py test core --settings=crisp.test_settings
# Run tests with verbose output
python manage.py test core --settings=crisp.test_settings -v 2
# Test STIX parser
python manage.py test core.tests.test_stix1_parser --
settings=crisp.test_settings
# Test TAXII service
python manage.py test core.tests.test_taxii_service --
settings=crisp.test_settings
# Test integration
python manage.py test core.tests.test_taxii_integration --
settings=crisp.test_settings
# Test end-to-end
python manage.py test core.tests.test_end_to_end --
Test Coverage
Current Test Coverage
The current test coverage for the TAXII feed consumption is approximately 91%, with all 78
tests passing successfully. This indicates a robust and well-tested implementation.
Key components with high coverage:
Industry-Standard Implementation
This TAXII feed consumption implementation follows established industry standards and
practices used by major threat intelligence platforms. The following elements align with industry
settings=crisp.test_settings
# Install coverage package
pip install coverage
# Run tests with coverage
coverage run --source='.' manage.py test core --settings=crisp.test_settings
# Display basic coverage report
coverage report
# Generate detailed HTML coverage report
coverage html
Repository layer: 100%
Factory pattern implementations: >84%
Observer pattern implementation: 97%
best practices:
Structured Processing Pipeline
The implementation follows the standard industry flow for threat intelligence consumption:
Other Industry-Standard Elements
Project Structure
1. Connection Establishment: Securely connect to TAXII server with appropriate
authentication
2. Collection Discovery: Identify and select appropriate intelligence collections
3. Content Polling: Retrieve content blocks using standardized TAXII polling
4. STIX Processing: Parse and validate standardized STIX data
5. Entity Conversion: Transform external STIX objects to internal domain entities
6. Deduplication: Check for and handle duplicate intelligence items
7. Storage: Persist threat intelligence in structured database
8. Notification: Alert relevant systems about new intelligence
1. STIX/TAXII Compatibility: Full support for the STIX format and TAXII 2.1 protocol, aligning
with platforms like MISP, OpenCTI, and ThreatConnect
2. Automated Collection: Scheduled and on-demand polling of external feeds, similar to
commercial threat intelligence platforms
3. Batch Processing: Efficient handling of large volumes of threat data through batched
processing, a common approach in production systems
4. Standardized Entity Types: Proper processing of industry-standard entity types including
indicators (IPs, domains, hashes) and TTPs (attack patterns)
5. Authentication Management: Secure handling of API keys and credentials for accessing
external feeds
6. Error Handling: Robust error handling for network issues, malformed data, and service
disruptions
7. API-First Design: RESTful API endpoints for programmatic consumption control, allowing
integration with other security tools
crisp/
 manage.py                         # Django management script
 requirements.txt                  # Project dependencies
 .env                              # Environment variables
 crisp/                          
    __init__.py                  
    settings.py                   # Django settings
    urls.py                       # URL configuration
    celery.py                     # Celery configuration
    wsgi.py                      
 core/                            
    __init__.py                  
    admin.py                      # Admin panel configuration
    apps.py                      
    models/                       # Domain models
       __init__.py              
       indicator.py              # Indicator model
       institution.py            # Institution model
       ttp_data.py               # TTP data model
    patterns/                     # Design pattern implementations
       observer/                 # Observer pattern
          __init__.py          
          threat_feed.py        # ThreatFeed as Subject
       factory/                  # Factory pattern
          __init__.py          
          stix_object_creator.py
          stix_indicator_creator.py
          stix_ttp_creator.py  
       decorator/                # Decorator pattern
           __init__.py          
           stix_object_component.py
           stix_decorator.py    
    repositories/                 # Repositories layer
       __init__.py              
       threat_feed_repository.py
       indicator_repository.py  
       ttp_repository.py        
    services/                     # Services layer
       __init__.py              
       otx_taxii_service.py      # OTX TAXII service
       stix_taxii_service.py     # Generic STIX/TAXII service
       threat_feed_service.py  
Conclusion
The TAXII feed consumption component provides a robust solution for automatically retrieving,
processing, and storing standardized threat intelligence. By leveraging industry-standard
protocols (STIX/TAXII) and following established processing workflows, the implementation
ensures compatibility with a wide range of threat intelligence sources and aligns with industry-
leading platforms.
The batched processing approach allows for efficient handling of large volumes of threat data,
while the comprehensive test suite ensures reliability and correctness. With a current test
coverage of 91%, the implementation demonstrates a strong commitment to quality and
robustness