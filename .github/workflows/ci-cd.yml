name: CI/CD Pipeline

on:
  push:
    branches: [ main, Dev, Dev2_integration ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run All Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/Dev2_integration'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: crisp_test
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client redis-tools
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r Capstone-Unified/requirements.txt
        pip install pytest pytest-cov coverage pytest-django
        pip install flake8 bandit safety
        
    - name: Verify core module imports
      env:
        PYTHONPATH: ${{ github.workspace }}/Capstone-Unified
      run: |
        echo "Verifying core module imports..."
        python3 -c "
        try:
            from core.patterns.strategy.enums import AnonymizationLevel
            from core.patterns.strategy.context import AnonymizationContext
            from core.patterns.strategy.strategies import IPAddressAnonymizationStrategy, DomainAnonymizationStrategy
            print('Core strategy imports successful')
        except ImportError as e:
            print('Core import verification failed:', e)
            exit(1)
        "

    - name: Verify Django configuration
      env:
        DJANGO_SETTINGS_MODULE: settings.settings
        SECRET_KEY: test-secret-key-for-ci-cd-pipeline
        DB_NAME: crisp_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DEBUG: False
        EMAIL_BACKEND: django.core.mail.backends.locmem.EmailBackend
        OTX_API_KEY: test-key
        OTX_ENABLED: False
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}/Capstone-Unified
      run: |
        echo "Verifying Django configuration..."
        cd Capstone-Unified
        python3 -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings.settings')
        import django
        django.setup()
        print('Django configuration verified')
        "

    - name: Run database migrations
      env:
        DJANGO_SETTINGS_MODULE: settings.settings
        SECRET_KEY: test-secret-key-for-ci-cd-pipeline
        DB_NAME: crisp_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DEBUG: False
        EMAIL_BACKEND: django.core.mail.backends.locmem.EmailBackend
        OTX_API_KEY: test-key
        OTX_ENABLED: False
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}/Capstone-Unified
      run: |
        echo "Executing database migrations..."
        cd Capstone-Unified
        python manage.py migrate --noinput
        echo "Database migrations completed successfully"

    - name: Run core module tests
      env:
        PYTHONPATH: ${{ github.workspace }}/Capstone-Unified
        DJANGO_SETTINGS_MODULE: settings.settings
        SECRET_KEY: test-secret-key-for-ci-cd-pipeline
        DB_NAME: crisp_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DEBUG: False
        EMAIL_BACKEND: django.core.mail.backends.locmem.EmailBackend
        OTX_API_KEY: test-key
        OTX_ENABLED: False
        REDIS_URL: redis://localhost:6379/0
      run: |
        echo "Running core module tests..."
        cd Capstone-Unified
        python manage.py test core.tests --verbosity=2
        echo "Core module tests completed successfully"
        
    - name: Run Django application tests
      env:
        DJANGO_SETTINGS_MODULE: settings.settings
        SECRET_KEY: test-secret-key-for-ci-cd-pipeline
        DB_NAME: crisp_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DEBUG: False
        EMAIL_BACKEND: django.core.mail.backends.locmem.EmailBackend
        OTX_API_KEY: test-key
        OTX_ENABLED: False
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}/Capstone-Unified
      run: |
        echo "Running Django application tests..."
        cd Capstone-Unified
        python manage.py test --verbosity=2 --failfast --exclude-tag=slow
        echo "Django application tests completed successfully"

    - name: Run SOC module tests
      env:
        DJANGO_SETTINGS_MODULE: settings.settings
        SECRET_KEY: test-secret-key-for-ci-cd-pipeline
        DB_NAME: crisp_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DEBUG: False
        EMAIL_BACKEND: django.core.mail.backends.locmem.EmailBackend
        OTX_API_KEY: test-key
        OTX_ENABLED: False
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}/Capstone-Unified
      run: |
        echo "Running SOC module tests..."
        cd Capstone-Unified
        python manage.py test soc --verbosity=2
        echo "SOC module tests completed successfully"

    - name: Generate test coverage report
      if: success()
      env:
        DJANGO_SETTINGS_MODULE: settings.settings
        SECRET_KEY: test-secret-key-for-ci-cd-pipeline
        DB_NAME: crisp_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DEBUG: False
        EMAIL_BACKEND: django.core.mail.backends.locmem.EmailBackend
        OTX_API_KEY: test-key
        OTX_ENABLED: False
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}/Capstone-Unified
      run: |
        echo "Generating test coverage report..."
        cd Capstone-Unified
        coverage run --source='.' manage.py test
        coverage report --show-missing --skip-covered
        coverage html
        echo "Test coverage report generated"

    - name: Run code quality checks
      run: |
        echo "Running code quality checks..."
        cd Capstone-Unified
        flake8 core/ --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=core/migrations/,core/tests/
        flake8 soc/ --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=soc/migrations/
        flake8 settings/ --count --select=E9,F63,F7,F82 --show-source --statistics
        echo "Code quality checks completed"

    - name: Run security scans
      run: |
        echo "Running security vulnerability scans..."
        cd Capstone-Unified
        bandit -r core/ soc/ settings/ -f json -o bandit-report.json --exclude=*/migrations/,*/tests/ --severity-level high
        safety check --file=requirements.txt
        echo "Security scans completed"

    - name: Upload test coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: Capstone-Unified/htmlcov/
        if-no-files-found: ignore

    - name: Upload security scan report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: Capstone-Unified/bandit-report.json
        if-no-files-found: ignore

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/Dev2_integration'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Capstone-Unified/frontend/crisp-react/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd Capstone-Unified/frontend/crisp-react
        npm ci

    - name: Run frontend linting
      run: |
        cd Capstone-Unified/frontend/crisp-react
        npm run lint --if-present

    - name: Run frontend tests
      run: |
        cd Capstone-Unified/frontend/crisp-react
        npm run test --if-present

    - name: Build frontend
      run: |
        cd Capstone-Unified/frontend/crisp-react
        npm run build

  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, frontend-test]
    if: always() && (github.ref == 'refs/heads/main' && needs.test.result == 'success' && needs.frontend-test.result == 'success') || github.ref == 'refs/heads/Dev2_integration'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: datadefenders/crisp
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Capstone-Unified
        file: ./Capstone-Unified/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  status-report:
    name: Pipeline Status Report
    runs-on: ubuntu-latest
    needs: [test, frontend-test, docker-build-push]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/Dev2_integration')
    
    steps:
    - name: Report pipeline status
      run: |
        echo "================================================"
        echo "CRISP PLATFORM CI/CD PIPELINE RESULTS"
        echo "================================================"
        echo "Backend Test Status: ${{ needs.test.result }}"
        echo "Frontend Test Status: ${{ needs.frontend-test.result }}"
        echo "Docker Build Status: ${{ needs.docker-build-push.result }}"
        echo "Branch: ${{ github.ref_name }}"
        echo ""
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.frontend-test.result }}" == "success" ]; then
          echo "SUCCESS: All tests and quality checks passed"
          echo ""
          echo "Test Results:"
          echo "- Core module tests: PASSED"
          echo "- Django application tests: PASSED"  
          echo "- SOC module tests: PASSED"
          echo "- Frontend tests: PASSED"
          echo "- Code quality checks: PASSED"
          echo "- Security scans: PASSED"
          echo ""
          echo "DEPLOYMENT STATUS: APPROVED"
          echo "Application is ready for deployment"
        else
          echo "FAILURE: Pipeline failed - deployment blocked"
          echo ""
          echo "DEPLOYMENT STATUS: REJECTED"
          echo "Critical issues found - do not deploy"
          echo ""
          echo "Troubleshooting steps:"
          echo "1. Review failed job logs above"
          echo "2. Fix identified issues in code"
          echo "3. Run tests locally to verify fixes"
          echo "4. Push changes to re-trigger pipeline"
          echo ""
          echo "Common failure causes:"
          echo "- Test failures indicating business logic bugs"
          echo "- Import or dependency configuration issues"
          echo "- Database migration or model problems"
          echo "- Code quality violations or syntax errors"
          echo "- High-severity security vulnerabilities"
          echo "- Frontend build or test failures"
          echo "- WebSocket or real-time feature issues"
        fi
        echo "================================================"
