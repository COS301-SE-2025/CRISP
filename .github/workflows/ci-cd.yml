name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run All Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: crisp_test
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r crisp/requirements.txt
        pip install pytest pytest-django pytest-cov coverage
        pip install flake8 bandit safety

    - name: Run Core Tests (pytest)
      env:
        PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/core
      run: |
        cd core
        python -m pytest tests/ -v --tb=short
        
    - name: Run Django Tests
      env:
        DJANGO_SETTINGS_MODULE: crisp_threat_intel.settings
        SECRET_KEY: test-secret-key-for-ci-cd-pipeline
        DB_NAME: crisp_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DEBUG: False
        PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/core
      run: |
        cd crisp
        python manage.py migrate --noinput
        python manage.py test --verbosity=2

    - name: Run Coverage Report
      env:
        DJANGO_SETTINGS_MODULE: crisp_threat_intel.settings
        SECRET_KEY: test-secret-key-for-ci-cd-pipeline
        DB_NAME: crisp_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DEBUG: False
        PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/core
      run: |
        cd crisp
        coverage run --source='.' manage.py test
        coverage report --show-missing
        coverage html

    - name: Lint with flake8
      run: |
        # Lint core module
        flake8 core/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Lint Django app
        flake8 crisp/ --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=crisp/crisp_threat_intel/migrations/

    - name: Security check with bandit
      run: |
        bandit -r core/ crisp/ -f json -o bandit-report.json || true
        bandit -r core/ crisp/ --exclude=crisp/crisp_threat_intel/migrations/

    - name: Security check with safety
      run: |
        safety check --file=crisp/requirements.txt

    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: crisp/htmlcov/

  status-report:
    name: CI/CD Status Report
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    
    steps:
    - name: Report Status
      run: |
        echo "üîç Test Results:"
        echo "  Core Tests: ${{ needs.test.result }}"
        echo "  Django Tests: ${{ needs.test.result }}"
        echo "  Linting: ${{ needs.test.result }}"
        echo "  Security Checks: ${{ needs.test.result }}"
        echo ""
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "‚úÖ All tests passed successfully!"
        else
          echo "‚ùå Some tests failed. Please check the test job for details."
        fi