"""
Standalone unit tests for Gmail SMTP service
Run with: python3 test_gmail_unit.py
"""
import unittest
from unittest.mock import patch, MagicMock
import smtplib
import sys
import os

# Add current directory to path for imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Mock Django settings
class MockSettings:
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = 'test@gmail.com'
    EMAIL_HOST_PASSWORD = 'test_password'
    CRISP_SENDER_NAME = 'CRISP Test'
    CRISP_SENDER_EMAIL = 'test@gmail.com'

# Mock Django timezone
class MockTimezone:
    @staticmethod
    def now():
        from datetime import datetime
        return datetime(2023, 1, 1, 12, 0, 0)

# Mock modules
sys.modules['django.conf'] = MagicMock()
sys.modules['django.conf'].settings = MockSettings()
sys.modules['django.utils'] = MagicMock()
sys.modules['django.utils.timezone'] = MockTimezone()

# Import the service after mocking Django
from core.services.gmail_smtp_service import GmailSMTPService


class TestGmailSMTPService(unittest.TestCase):
    """Test cases for the GmailSMTPService"""

    def setUp(self):
        """Set up the test environment"""
        self.service = GmailSMTPService()
        self.test_email = "test@example.com"
        self.test_subject = "Test Subject"
        self.test_html_content = "<h1>Test HTML Content</h1>"
        self.test_text_content = "Test text content"

    @patch('core.services.gmail_smtp_service.smtplib.SMTP')
    def test_send_email_success(self, mock_smtp):
        """Test successful email sending"""
        print("üìß Testing: Basic email sending functionality")
        print("   ‚Üí Mocking Gmail SMTP server connection")
        
        # Mock SMTP server
        mock_server = MagicMock()
        mock_smtp.return_value = mock_server
        
        print("   ‚Üí Sending test email with HTML and text content")
        # Call send_email
        result = self.service.send_email(
            to_emails=[self.test_email],
            subject=self.test_subject,
            html_content=self.test_html_content,
            text_content=self.test_text_content
        )
        
        print("   ‚Üí Verifying SMTP connection sequence:")
        # Verify SMTP interactions
        mock_smtp.assert_called_once_with(self.service.email_host, self.service.email_port)
        print("     ‚úì Connected to smtp.gmail.com:587")
        
        mock_server.starttls.assert_called_once()
        print("     ‚úì TLS encryption started")
        
        mock_server.login.assert_called_once_with(
            self.service.email_host_user, 
            self.service.email_host_password
        )
        print("     ‚úì Gmail authentication successful")
        
        mock_server.send_message.assert_called_once()
        print("     ‚úì Email message sent")
        
        mock_server.quit.assert_called_once()
        print("     ‚úì SMTP connection closed cleanly")
        
        # Verify result
        self.assertTrue(result['success'])
        self.assertEqual(result['message'], 'Email sent successfully')
        print("   ‚Üí ‚úÖ Email sending completed successfully")

    @patch('core.services.gmail_smtp_service.smtplib.SMTP')
    def test_send_email_authentication_error(self, mock_smtp):
        """Test email sending with authentication error"""
        print("üîê Testing: Gmail authentication failure handling")
        print("   ‚Üí Simulating invalid Gmail credentials (wrong password/app password)")
        
        # Mock SMTP server with authentication error
        mock_server = MagicMock()
        mock_server.login.side_effect = smtplib.SMTPAuthenticationError(535, "Authentication failed")
        mock_smtp.return_value = mock_server
        
        print("   ‚Üí Attempting email send with bad credentials")
        # Call send_email
        result = self.service.send_email(
            to_emails=[self.test_email],
            subject=self.test_subject,
            html_content=self.test_html_content
        )
        
        print("   ‚Üí Verifying error handling:")
        # Verify result
        self.assertFalse(result['success'])
        self.assertIn('Authentication failed', result['message'])
        print("     ‚úì Service properly caught authentication error")
        print("     ‚úì Returned failure status with error details")
        print("   ‚Üí ‚úÖ Authentication error handling works correctly")

    @patch('core.services.gmail_smtp_service.smtplib.SMTP')
    def test_send_email_connection_error(self, mock_smtp):
        """Test email sending with connection error"""
        print("üåê Testing: Network connectivity failure handling")
        print("   ‚Üí Simulating Gmail server unreachable (network issues, DNS problems)")
        
        # Mock SMTP with connection error
        mock_smtp.side_effect = smtplib.SMTPConnectError(421, "Connection failed")
        
        print("   ‚Üí Attempting to connect to Gmail SMTP server")
        # Call send_email
        result = self.service.send_email(
            to_emails=[self.test_email],
            subject=self.test_subject,
            html_content=self.test_html_content
        )
        
        print("   ‚Üí Verifying connection error handling:")
        # Verify result
        self.assertFalse(result['success'])
        self.assertIn('Connection failed', result['message'])
        print("     ‚úì Service properly caught connection error")
        print("     ‚úì Returned failure status without crashing")
        print("   ‚Üí ‚úÖ Network error handling works correctly")

    @patch('core.services.gmail_smtp_service.smtplib.SMTP')
    def test_send_threat_alert_email(self, mock_smtp):
        """Test sending threat alert email"""
        print("üö® Testing: Cybersecurity threat alert email generation")
        print("   ‚Üí Creating high-severity indicator alert data")
        
        # Mock SMTP server
        mock_server = MagicMock()
        mock_smtp.return_value = mock_server
        
        alert_data = {
            'alert_type': 'high_severity_indicator',
            'priority': 'high',
            'generated_at': MockTimezone.now(),
            'alert_id': 'ALERT-123',
            'data': {
                'feed_name': 'AlienVault OTX',
                'indicator_type': 'IP',
                'indicator_value': '192.168.1.100',
                'severity': 'High',
                'confidence': '85'
            }
        }
        
        print("   ‚Üí Alert contains: IP indicator 192.168.1.100 (High severity, 85% confidence)")
        print("   ‚Üí Generating specialized threat alert email")
        
        # Call send_threat_alert_email
        result = self.service.send_threat_alert_email(
            recipient_emails=[self.test_email],
            alert_data=alert_data
        )
        
        print("   ‚Üí Verifying threat alert formatting:")
        # Verify SMTP interactions
        mock_server.send_message.assert_called_once()
        
        # Get the sent message to verify content
        sent_message = mock_server.send_message.call_args[0][0]
        self.assertIn('‚ö†Ô∏è HIGH', sent_message['Subject'])
        self.assertIn('high_severity_indicator', sent_message['Subject'])
        print("     ‚úì Subject line includes priority emoji and alert type")
        print("     ‚úì Email contains threat intelligence data")
        print("     ‚úì Both HTML and text versions generated")
        
        # Verify result
        self.assertTrue(result['success'])
        print("   ‚Üí ‚úÖ Threat alert email generation successful")

    @patch('core.services.gmail_smtp_service.smtplib.SMTP')
    def test_test_connection_success(self, mock_smtp):
        """Test successful SMTP connection test"""
        print("üîç Testing: SMTP connection health check")
        print("   ‚Üí Testing connection without sending emails (health check mode)")
        
        # Mock SMTP server
        mock_server = MagicMock()
        mock_smtp.return_value = mock_server
        
        print("   ‚Üí Performing connection test sequence")
        # Call test_connection
        result = self.service.test_connection()
        
        print("   ‚Üí Verifying connection health check steps:")
        # Verify SMTP interactions
        mock_smtp.assert_called_once_with(self.service.email_host, self.service.email_port)
        print("     ‚úì Established connection to Gmail SMTP server")
        
        mock_server.starttls.assert_called_once()
        print("     ‚úì TLS security handshake completed")
        
        mock_server.login.assert_called_once()
        print("     ‚úì Gmail authentication verified")
        
        mock_server.quit.assert_called_once()
        print("     ‚úì Connection closed cleanly")
        
        # Verify result
        self.assertTrue(result['success'])
        self.assertEqual(result['status'], 'online')
        print("   ‚Üí ‚úÖ Connection health check passed - service is operational")

    def test_generate_threat_alert_html(self):
        """Test HTML generation for threat alerts"""
        print("üé® Testing: HTML email template generation for threats")
        print("   ‚Üí Creating critical TTP (Tactics, Techniques, Procedures) alert")
        
        alert_data = {
            'alert_type': 'critical_ttp',
            'priority': 'critical',
            'generated_at': MockTimezone.now(),
            'alert_id': 'ALERT-456',
            'data': {
                'feed_name': 'MITRE ATT&CK',
                'ttp_name': 'Credential Dumping',
                'tactic': 'Credential Access',
                'technique': 'T1003',
                'mitre_technique': 'T1003 - OS Credential Dumping'
            }
        }
        
        print("   ‚Üí Alert contains: MITRE ATT&CK T1003 Credential Dumping technique")
        print("   ‚Üí Generating responsive HTML email template")
        
        html_content = self.service._generate_threat_alert_html(alert_data)
        
        print("   ‚Üí Verifying HTML template generation:")
        # Verify HTML content contains expected elements
        self.assertIn('critical_ttp', html_content)
        self.assertIn('critical', html_content)  # Priority value, not uppercase
        print("     ‚úì Alert type and priority correctly embedded")
        
        self.assertIn('ALERT-456', html_content)
        print("     ‚úì Alert ID included for tracking")
        
        self.assertIn('Credential Dumping', html_content)
        self.assertIn('T1003', html_content)
        print("     ‚úì MITRE ATT&CK technique details present")
        
        self.assertIn('#dc3545', html_content)  # Critical priority color
        print("     ‚úì Critical priority styling applied (red color scheme)")
        print("   ‚Üí ‚úÖ HTML threat alert template generated successfully")

    def test_configuration_validation(self):
        """Test service configuration validation"""
        print("‚öôÔ∏è  Testing: Gmail SMTP service configuration validation")
        print("   ‚Üí Checking that all required settings are properly loaded")
        
        # Test that service has required configuration
        self.assertIsNotNone(self.service.email_host)
        print("     ‚úì SMTP host configured (smtp.gmail.com)")
        
        self.assertIsNotNone(self.service.email_port)
        print("     ‚úì SMTP port configured (587 for TLS)")
        
        self.assertIsNotNone(self.service.email_use_tls)
        print("     ‚úì TLS encryption enabled")
        
        self.assertIsNotNone(self.service.default_sender)
        print("     ‚úì Default sender information set")
        
        print("   ‚Üí ‚úÖ Service configuration is valid and ready for use")


def run_tests():
    """Run all tests"""
    print("üß™ Gmail SMTP Service Unit Test Suite")
    print("=" * 60)
    print("üéØ Purpose: Validate email functionality for CRISP threat platform")
    print("üîß Testing: Gmail SMTP integration with mocked connections")
    print("üìã Coverage: Authentication, connectivity, threat alerts, templates")
    print("=" * 60)
    print()
    
    # Create test suite
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestGmailSMTPService)
    
    # Run tests with maximum verbosity
    runner = unittest.TextTestRunner(verbosity=0, stream=sys.stdout, buffer=False)
    result = runner.run(suite)
    
    # Print detailed summary
    print("\n" + "=" * 60)
    print("üìä FINAL TEST RESULTS SUMMARY")
    print("=" * 60)
    print(f"üî¢ Total Tests Executed: {result.testsRun}")
    print(f"‚úÖ Successful Tests: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå Failed Tests: {len(result.failures)}")
    print(f"üí• Error Tests: {len(result.errors)}")
    print(f"‚è≠Ô∏è  Skipped Tests: {len(result.skipped) if hasattr(result, 'skipped') else 0}")
    
    if result.wasSuccessful():
        print("\nüéâ ALL TESTS PASSED! üéâ")
        print("‚úÖ Gmail SMTP service is ready for production use")
        print("‚úÖ Authentication, connectivity, and threat alerting validated")
        print("‚úÖ Error handling mechanisms work correctly")
        print("‚úÖ Email templates generate proper HTML and text content")
    else:
        print(f"\n‚ö†Ô∏è  SOME TESTS FAILED!")
        print(f"‚ùå {len(result.failures)} test(s) failed")
        print(f"‚ùå {len(result.errors)} test(s) had errors")
        print("üîß Review the detailed output above for specific issues")
        
        # Print failure details
        if result.failures:
            print("\nüî¥ FAILURE DETAILS:")
            for test, traceback in result.failures:
                print(f"   üìç {test}")
                print(f"   üìù {traceback}")
        
        if result.errors:
            print("\nüî¥ ERROR DETAILS:")
            for test, traceback in result.errors:
                print(f"   üìç {test}")
                print(f"   üìù {traceback}")
    
    print("=" * 60)
    return result.wasSuccessful()


if __name__ == "__main__":
    success = run_tests()
    exit(0 if success else 1)