# Generated by Django 4.2.21 on 2025-08-12 19:33

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('viewer', 'Viewer'), ('publisher', 'Publisher'), ('BlueVisionAdmin', 'BlueVision Administrator')], default='viewer', help_text="User's role in the system", max_length=20)),
                ('is_publisher', models.BooleanField(default=False, help_text='Whether user can publish threat intelligence')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether user account is verified')),
                ('failed_login_attempts', models.IntegerField(default=0, help_text='Number of consecutive failed login attempts')),
                ('account_locked_until', models.DateTimeField(blank=True, help_text='When account lock expires', null=True)),
                ('password_changed_at', models.DateTimeField(blank=True, help_text='When password was last changed', null=True)),
                ('two_factor_enabled', models.BooleanField(default=False, help_text='Whether two-factor authentication is enabled')),
                ('two_factor_secret', models.CharField(blank=True, help_text='Secret for two-factor authentication', max_length=32)),
                ('trusted_devices', models.JSONField(blank=True, default=list, help_text='List of trusted device fingerprints')),
                ('preferences', models.JSONField(blank=True, default=dict, help_text='User preferences and settings')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional user metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['username'],
            },
        ),
        migrations.CreateModel(
            name='AuthenticationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('login_success', 'Login Success'), ('login_failure', 'Login Failure'), ('logout', 'Logout'), ('password_change', 'Password Change'), ('password_reset', 'Password Reset'), ('account_locked', 'Account Locked'), ('account_unlocked', 'Account Unlocked'), ('user_created', 'User Created'), ('user_modified', 'User Modified'), ('user_deactivated', 'User Deactivated'), ('two_factor_enabled', 'Two-Factor Enabled'), ('two_factor_disabled', 'Two-Factor Disabled'), ('trusted_device_added', 'Trusted Device Added'), ('trusted_device_removed', 'Trusted Device Removed'), ('token_refresh', 'Token Refresh'), ('session_expired', 'Session Expired')], help_text='Type of authentication action', max_length=50)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which action was performed', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string', null=True)),
                ('success', models.BooleanField(default=True, help_text='Whether the action was successful')),
                ('failure_reason', models.CharField(blank=True, help_text='Reason for failure if action was unsuccessful', max_length=255, null=True)),
                ('additional_data', models.JSONField(default=dict, help_text='Additional data about the authentication event')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Authentication Log',
                'verbose_name_plural': 'Authentication Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('alias', models.SlugField(unique=True)),
                ('can_read', models.BooleanField(default=True)),
                ('can_write', models.BooleanField(default=False)),
                ('media_types', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('default_anonymization_level', models.CharField(choices=[('none', 'None'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('full', 'Full')], default='medium', max_length=20)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CollectionObject',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Feed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('alias', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=255)),
                ('status', models.CharField(max_length=50)),
                ('is_public', models.BooleanField(default=False)),
                ('anonymization_level', models.CharField(choices=[('none', 'None'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Identity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stix_id', models.CharField(max_length=255, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('identity_class', models.CharField(max_length=100)),
                ('raw_data', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'Identities',
                'ordering': ['-modified'],
            },
        ),
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('type', models.CharField(choices=[('ip', 'IP Address'), ('domain', 'Domain'), ('url', 'URL'), ('file_hash', 'File Hash'), ('email', 'Email Address'), ('user_agent', 'User Agent'), ('registry', 'Registry Key'), ('mutex', 'Mutex'), ('process', 'Process')], max_length=50)),
                ('hash_type', models.CharField(blank=True, choices=[('md5', 'MD5'), ('sha1', 'SHA1'), ('sha256', 'SHA256'), ('sha512', 'SHA512')], max_length=10, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('confidence', models.IntegerField(default=50)),
                ('stix_id', models.CharField(max_length=255, unique=True)),
                ('first_seen', models.DateTimeField()),
                ('last_seen', models.DateTimeField()),
                ('is_anonymized', models.BooleanField(default=False)),
                ('original_value', models.TextField(blank=True, null=True)),
                ('anonymization_method', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'indicators',
                'ordering': ['-last_seen'],
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'institutions',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NetworkMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('membership_level', models.CharField(choices=[('full', 'Full Member'), ('associate', 'Associate Member'), ('observer', 'Observer')], max_length=50)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('identity_class', models.CharField(default='organization', max_length=100)),
                ('organization_type', models.CharField(choices=[('educational', 'Educational'), ('government', 'Government'), ('private', 'Private')], default='educational', max_length=100)),
                ('sectors', models.JSONField(blank=True, default=list, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('domain', models.CharField(blank=True, max_length=255, null=True)),
                ('stix_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('is_publisher', models.BooleanField(default=False, help_text='Whether this organization can publish threat intelligence')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this organization is verified')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this organization is active')),
                ('trust_metadata', models.JSONField(blank=True, default=dict, help_text='Trust-related metadata for this organization')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(help_text='Secure reset token', max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When this token expires')),
                ('used_at', models.DateTimeField(blank=True, help_text='When the token was used', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address that requested the reset', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent of the request')),
            ],
            options={
                'verbose_name': 'Password Reset Token',
                'verbose_name_plural': 'Password Reset Tokens',
            },
        ),
        migrations.CreateModel(
            name='SharingPolicy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the sharing policy', max_length=255, unique=True)),
                ('description', models.TextField(help_text='Description of what this policy controls')),
                ('allowed_stix_types', models.JSONField(default=list, help_text='List of STIX object types that can be shared')),
                ('blocked_stix_types', models.JSONField(default=list, help_text='List of STIX object types that are blocked')),
                ('allowed_indicator_types', models.JSONField(default=list, help_text='List of indicator types that can be shared')),
                ('blocked_indicator_types', models.JSONField(default=list, help_text='List of indicator types that are blocked')),
                ('max_tlp_level', models.CharField(choices=[('white', 'TLP:WHITE'), ('green', 'TLP:GREEN'), ('amber', 'TLP:AMBER'), ('red', 'TLP:RED')], default='green', help_text='Maximum TLP level that can be shared', max_length=20)),
                ('max_age_days', models.IntegerField(blank=True, help_text='Maximum age of intelligence that can be shared (in days)', null=True)),
                ('require_anonymization', models.BooleanField(default=True, help_text='Whether anonymization is required')),
                ('anonymization_rules', models.JSONField(default=dict, help_text='Specific anonymization rules to apply')),
                ('allow_attribution', models.BooleanField(default=False, help_text='Whether attribution to source organization is allowed')),
                ('additional_constraints', models.JSONField(default=dict, help_text='Additional policy constraints')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this policy is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(help_text='User who created this policy', max_length=255)),
            ],
            options={
                'verbose_name': 'Sharing Policy',
                'verbose_name_plural': 'Sharing Policies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='STIXObject',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stix_id', models.CharField(max_length=255, unique=True)),
                ('stix_type', models.CharField(choices=[('indicator', 'Indicator'), ('malware', 'Malware'), ('attack-pattern', 'Attack Pattern'), ('threat-actor', 'Threat Actor'), ('identity', 'Identity'), ('relationship', 'Relationship'), ('tool', 'Tool'), ('vulnerability', 'Vulnerability'), ('observed-data', 'Observed Data'), ('report', 'Report'), ('course-of-action', 'Course of Action'), ('campaign', 'Campaign'), ('intrusion-set', 'Intrusion Set'), ('infrastructure', 'Infrastructure'), ('location', 'Location'), ('note', 'Note'), ('opinion', 'Opinion'), ('marking-definition', 'Marking Definition')], max_length=100)),
                ('spec_version', models.CharField(default='2.1', max_length=20)),
                ('created', models.DateTimeField()),
                ('modified', models.DateTimeField()),
                ('created_by_ref', models.CharField(blank=True, max_length=255, null=True)),
                ('revoked', models.BooleanField(default=False)),
                ('labels', models.JSONField(default=list)),
                ('confidence', models.IntegerField(default=0)),
                ('external_references', models.JSONField(default=list)),
                ('object_marking_refs', models.JSONField(default=list)),
                ('granular_markings', models.JSONField(default=list)),
                ('raw_data', models.JSONField()),
                ('original_data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('anonymized', models.BooleanField(default=False)),
                ('anonymization_strategy', models.CharField(blank=True, max_length=50, null=True)),
                ('anonymization_trust_level', models.FloatField(blank=True, null=True)),
                ('original_object_ref', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SystemActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('feed_added', 'Feed Added'), ('feed_consumed', 'Feed Consumed'), ('feed_deleted', 'Feed Deleted'), ('indicator_added', 'Indicator Added'), ('indicators_bulk_added', 'Bulk Indicators Added'), ('feed_updated', 'Feed Updated'), ('feed_error', 'Feed Error'), ('system_event', 'System Event')], max_length=50)),
                ('category', models.CharField(choices=[('feed', 'Feed Activity'), ('indicator', 'Indicator Activity'), ('system', 'System Activity'), ('user', 'User Activity')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'system_activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ThreatFeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('taxii_server_url', models.URLField(blank=True, null=True)),
                ('taxii_api_root', models.CharField(blank=True, max_length=255, null=True)),
                ('taxii_collection_id', models.CharField(blank=True, max_length=255, null=True)),
                ('taxii_username', models.CharField(blank=True, max_length=255, null=True)),
                ('taxii_password', models.CharField(blank=True, max_length=255, null=True)),
                ('is_external', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_interval_hours', models.IntegerField(default=24)),
                ('is_active', models.BooleanField(default=True)),
                ('last_error', models.TextField(blank=True, null=True)),
                ('sync_count', models.IntegerField(default=0)),
                ('last_published_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TrustedDevice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('device_fingerprint', models.CharField(help_text='Unique device fingerprint', max_length=255)),
                ('device_name', models.CharField(help_text='Human-readable device name', max_length=255)),
                ('device_type', models.CharField(choices=[('desktop', 'Desktop'), ('laptop', 'Laptop'), ('tablet', 'Tablet'), ('mobile', 'Mobile'), ('unknown', 'Unknown')], default='unknown', help_text='Type of device', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this device is currently trusted')),
                ('last_used', models.DateTimeField(auto_now=True, help_text='When this device was last used')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When trust for this device expires', null=True)),
            ],
            options={
                'verbose_name': 'Trusted Device',
                'verbose_name_plural': 'Trusted Devices',
                'ordering': ['-last_used'],
            },
        ),
        migrations.CreateModel(
            name='TrustGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the trust group', max_length=255, unique=True)),
                ('description', models.TextField(help_text="Description of the trust group's purpose")),
                ('group_type', models.CharField(default='community', help_text='Type of trust group (sector, geography, purpose, etc.)', max_length=50)),
                ('is_public', models.BooleanField(default=False, help_text='Whether organizations can request to join publicly')),
                ('requires_approval', models.BooleanField(default=True, help_text='Whether membership requires approval')),
                ('group_policies', models.JSONField(default=dict, help_text='Group-specific sharing and access policies')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this trust group is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(help_text='Organization that created this group', max_length=255)),
                ('administrators', models.JSONField(default=list, help_text='List of organization IDs that can administer this group')),
            ],
            options={
                'verbose_name': 'Trust Group',
                'verbose_name_plural': 'Trust Groups',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TrustGroupMembership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('membership_type', models.CharField(choices=[('member', 'Member'), ('administrator', 'Administrator'), ('moderator', 'Moderator')], default='member', help_text='Type of membership in the group', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this membership is active')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('left_at', models.DateTimeField(blank=True, help_text='When the organization left the group', null=True)),
                ('invited_by', models.CharField(blank=True, help_text='Organization that invited this member', max_length=255, null=True)),
                ('approved_by', models.CharField(blank=True, help_text='Administrator who approved this membership', max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Trust Group Membership',
                'verbose_name_plural': 'Trust Group Memberships',
                'ordering': ['-joined_at'],
            },
        ),
        migrations.CreateModel(
            name='TrustLevel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Unique name for this trust level', max_length=50, unique=True)),
                ('level', models.CharField(choices=[('public', 'Public Trust'), ('trusted', 'Trusted Trust'), ('restricted', 'Restricted Trust')], help_text='Standard trust level classification', max_length=20)),
                ('description', models.TextField(help_text='Detailed description of what this trust level means')),
                ('numerical_value', models.IntegerField(help_text='Numerical representation for comparison (0-100)')),
                ('default_anonymization_level', models.CharField(choices=[('none', 'No Anonymization'), ('minimal', 'Minimal Anonymization'), ('partial', 'Partial Anonymization'), ('full', 'Full Anonymization'), ('custom', 'Custom Anonymization')], default='partial', help_text='Default anonymization level for this trust level', max_length=20)),
                ('default_access_level', models.CharField(choices=[('none', 'No Access'), ('read', 'Read Only'), ('subscribe', 'Subscribe to Feeds'), ('contribute', 'Contribute Intelligence'), ('full', 'Full Access')], default='read', help_text='Default access level for this trust level', max_length=20)),
                ('sharing_policies', models.JSONField(default=dict, help_text='Detailed sharing policies and restrictions')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this trust level is currently active')),
                ('is_system_default', models.BooleanField(default=False, help_text='Whether this is a system default trust level')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(help_text='System user who created this trust level', max_length=255)),
            ],
            options={
                'verbose_name': 'Trust Level',
                'verbose_name_plural': 'Trust Levels',
                'ordering': ['numerical_value'],
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_token', models.TextField(help_text='JWT session token')),
                ('refresh_token', models.TextField(help_text='JWT refresh token')),
                ('device_info', models.JSONField(default=dict, help_text='Information about the device/browser')),
                ('ip_address', models.GenericIPAddressField(help_text='IP address of the session')),
                ('is_trusted_device', models.BooleanField(default=False, help_text='Whether this is a trusted device')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this session is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When this session expires')),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='Last activity timestamp')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.URLField(blank=True, help_text="URL to user's avatar image", null=True)),
                ('bio', models.TextField(blank=True, help_text="User's biography")),
                ('department', models.CharField(blank=True, help_text="User's department within organization", max_length=255)),
                ('job_title', models.CharField(blank=True, help_text="User's job title", max_length=255)),
                ('phone_number', models.CharField(blank=True, help_text="User's phone number", max_length=20)),
                ('email_notifications', models.BooleanField(default=True, help_text='Whether to receive email notifications')),
                ('threat_alerts', models.BooleanField(default=True, help_text='Whether to receive threat intelligence alerts')),
                ('security_notifications', models.BooleanField(default=True, help_text='Whether to receive security notifications')),
                ('profile_visibility', models.CharField(choices=[('private', 'Private'), ('organization', 'Organization Only'), ('trusted', 'Trusted Organizations'), ('public', 'Public')], default='organization', help_text='Who can see this profile', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='UserInvitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='Email address of the invitee', max_length=255)),
                ('invited_role', models.CharField(choices=[('viewer', 'Viewer'), ('publisher', 'Publisher')], default='viewer', help_text='Role the invitee will have in the organization', max_length=20)),
                ('token', models.CharField(help_text='Secure token for invitation acceptance', max_length=255, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='pending', help_text='Current status of the invitation', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When this invitation expires')),
                ('accepted_at', models.DateTimeField(blank=True, help_text='When the invitation was accepted', null=True)),
                ('message', models.TextField(blank=True, help_text='Optional message from the inviter')),
                ('accepted_by', models.ForeignKey(blank=True, help_text='User who accepted the invitation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accepted_invitations', to=settings.AUTH_USER_MODEL)),
                ('inviter', models.ForeignKey(help_text='User who sent the invitation', on_delete=django.db.models.deletion.CASCADE, related_name='sent_invitations', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(help_text='Organization extending the invitation', on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='core.organization')),
            ],
            options={
                'verbose_name': 'User Invitation',
                'verbose_name_plural': 'User Invitations',
            },
        ),
        migrations.CreateModel(
            name='TTPData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('mitre_technique_id', models.CharField(max_length=20)),
                ('mitre_tactic', models.CharField(blank=True, choices=[('reconnaissance', 'Reconnaissance'), ('resource_development', 'Resource Development'), ('initial_access', 'Initial Access'), ('execution', 'Execution'), ('persistence', 'Persistence'), ('privilege_escalation', 'Privilege Escalation'), ('defense_evasion', 'Defense Evasion'), ('credential_access', 'Credential Access'), ('discovery', 'Discovery'), ('lateral_movement', 'Lateral Movement'), ('collection', 'Collection'), ('command_and_control', 'Command and Control'), ('exfiltration', 'Exfiltration'), ('impact', 'Impact')], max_length=50, null=True)),
                ('mitre_subtechnique', models.CharField(blank=True, max_length=255, null=True)),
                ('stix_id', models.CharField(max_length=255, unique=True)),
                ('is_anonymized', models.BooleanField(default=False)),
                ('original_data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('threat_feed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ttps', to='core.threatfeed')),
            ],
            options={
                'db_table': 'ttp_data',
                'ordering': ['mitre_technique_id'],
            },
        ),
        migrations.CreateModel(
            name='TrustRelationship',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('relationship_type', models.CharField(choices=[('bilateral', 'Bilateral Trust'), ('community', 'Community Trust'), ('hierarchical', 'Hierarchical Trust'), ('federation', 'Federation Trust')], default='bilateral', help_text='Type of trust relationship', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('suspended', 'Suspended'), ('revoked', 'Revoked'), ('expired', 'Expired')], default='pending', help_text='Current status of the trust relationship', max_length=20)),
                ('is_bilateral', models.BooleanField(default=True, help_text='Whether trust is mutual (both directions)')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this relationship is currently active')),
                ('valid_from', models.DateTimeField(default=django.utils.timezone.now, help_text='When this trust relationship becomes valid')),
                ('valid_until', models.DateTimeField(blank=True, help_text='When this trust relationship expires (null = never)', null=True)),
                ('sharing_preferences', models.JSONField(default=dict, help_text='Organization-specific sharing preferences')),
                ('anonymization_level', models.CharField(choices=[('none', 'No Anonymization'), ('minimal', 'Minimal Anonymization'), ('partial', 'Partial Anonymization'), ('full', 'Full Anonymization'), ('custom', 'Custom Anonymization')], help_text='Level of anonymization to apply', max_length=20)),
                ('access_level', models.CharField(choices=[('none', 'No Access'), ('read', 'Read Only'), ('subscribe', 'Subscribe to Feeds'), ('contribute', 'Contribute Intelligence'), ('full', 'Full Access')], default='read', help_text='Access level granted by this relationship', max_length=20)),
                ('approved_by_source', models.BooleanField(default=False, help_text='Whether source organization has approved')),
                ('approved_by_target', models.BooleanField(default=False, help_text='Whether target organization has approved')),
                ('source_approval_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('target_approval_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata about the relationship')),
                ('notes', models.TextField(blank=True, help_text='Notes about this trust relationship')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activated_at', models.DateTimeField(blank=True, help_text='When this relationship was activated', null=True)),
                ('revoked_at', models.DateTimeField(blank=True, help_text='When this relationship was revoked', null=True)),
                ('approved_by_source_user', models.ForeignKey(blank=True, help_text='User who approved on behalf of source organization', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trust_approvals_as_source', to=settings.AUTH_USER_MODEL)),
                ('approved_by_target_user', models.ForeignKey(blank=True, help_text='User who approved on behalf of target organization', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trust_approvals_as_target', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this relationship', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_trust_relationships', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='User who last modified this relationship', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_trust_relationships', to=settings.AUTH_USER_MODEL)),
                ('revoked_by', models.ForeignKey(blank=True, help_text='User who revoked this relationship', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='revoked_trust_relationships', to=settings.AUTH_USER_MODEL)),
                ('source_organization', models.ForeignKey(help_text='Source organization in the trust relationship', on_delete=django.db.models.deletion.CASCADE, related_name='trust_relationships_as_source', to='core.organization')),
                ('target_organization', models.ForeignKey(help_text='Target organization in the trust relationship', on_delete=django.db.models.deletion.CASCADE, related_name='trust_relationships_as_target', to='core.organization')),
                ('trust_level', models.ForeignKey(help_text='Trust level for this relationship', on_delete=django.db.models.deletion.CASCADE, related_name='trust_relationships', to='core.trustlevel')),
            ],
            options={
                'verbose_name': 'Trust Relationship',
                'verbose_name_plural': 'Trust Relationships',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrustNetwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('default_trust_level', models.FloatField(default=0.6)),
                ('default_anonymization_level', models.CharField(choices=[('none', 'None'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('full', 'Full')], default='medium', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('members', models.ManyToManyField(related_name='trust_networks', through='core.NetworkMembership', to='core.organization')),
            ],
        ),
        migrations.CreateModel(
            name='TrustLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('relationship_created', 'Trust Relationship Created'), ('relationship_approved', 'Trust Relationship Approved'), ('relationship_activated', 'Trust Relationship Activated'), ('relationship_suspended', 'Trust Relationship Suspended'), ('relationship_revoked', 'Trust Relationship Revoked'), ('relationship_modified', 'Trust Relationship Modified'), ('group_created', 'Trust Group Created'), ('group_modified', 'Trust Group Modified'), ('group_joined', 'Joined Trust Group'), ('group_left', 'Left Trust Group'), ('access_granted', 'Access Granted'), ('access_denied', 'Access Denied'), ('intelligence_shared', 'Intelligence Shared'), ('intelligence_accessed', 'Intelligence Accessed'), ('trust_level_modified', 'Trust Level Modified')], help_text='Type of trust action performed', max_length=50)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which action was performed', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string', null=True)),
                ('success', models.BooleanField(default=True, help_text='Whether the action was successful')),
                ('failure_reason', models.CharField(blank=True, help_text='Reason for failure if action was unsuccessful', max_length=255, null=True)),
                ('details', models.JSONField(default=dict, help_text='Additional details about the action')),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata about the log entry')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('source_organization', models.ForeignKey(blank=True, help_text='Organization that initiated the action', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trust_logs_as_source', to='core.organization')),
                ('target_organization', models.ForeignKey(blank=True, help_text='Target organization (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trust_logs_as_target', to='core.organization')),
                ('trust_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trust_logs_as_user', to='core.trustgroup')),
                ('trust_relationship', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trust_logs', to='core.trustrelationship')),
                ('user', models.ForeignKey(blank=True, help_text='User who performed the action', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performed_trust_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Trust Log',
                'verbose_name_plural': 'Trust Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='trustlevel',
            index=models.Index(fields=['level'], name='core_trustl_level_81bc6f_idx'),
        ),
        migrations.AddIndex(
            model_name='trustlevel',
            index=models.Index(fields=['numerical_value'], name='core_trustl_numeric_c21783_idx'),
        ),
        migrations.AddIndex(
            model_name='trustlevel',
            index=models.Index(fields=['is_active'], name='core_trustl_is_acti_6ab25b_idx'),
        ),
        migrations.AddField(
            model_name='trustgroupmembership',
            name='organization',
            field=models.ForeignKey(help_text='Organization that is a member of this trust group', on_delete=django.db.models.deletion.CASCADE, related_name='trust_group_memberships', to='core.organization'),
        ),
        migrations.AddField(
            model_name='trustgroupmembership',
            name='trust_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to='core.trustgroup'),
        ),
        migrations.AddField(
            model_name='trustgroup',
            name='default_trust_level',
            field=models.ForeignKey(help_text='Default trust level for group members', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_for_groups', to='core.trustlevel'),
        ),
        migrations.AddField(
            model_name='trusteddevice',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='threatfeed',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_threat_feeds', to='core.organization'),
        ),
        migrations.AddField(
            model_name='systemactivity',
            name='indicator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.indicator'),
        ),
        migrations.AddField(
            model_name='systemactivity',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.organization'),
        ),
        migrations.AddField(
            model_name='systemactivity',
            name='threat_feed',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.threatfeed'),
        ),
        migrations.AddField(
            model_name='systemactivity',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='stixobject',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_stix_objects', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='stixobject',
            name='source_organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stix_objects', to='core.organization'),
        ),
        migrations.AddField(
            model_name='passwordresettoken',
            name='user',
            field=models.ForeignKey(help_text='User requesting password reset', on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='organization',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_organizations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='networkmembership',
            name='network',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.trustnetwork'),
        ),
        migrations.AddField(
            model_name='networkmembership',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.organization'),
        ),
        migrations.AddField(
            model_name='institution',
            name='organization',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.organization'),
        ),
        migrations.AddField(
            model_name='indicator',
            name='threat_feed',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indicators', to='core.threatfeed'),
        ),
        migrations.AddField(
            model_name='identity',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='identity',
            name='organization',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stix_identity', to='core.organization'),
        ),
        migrations.AddField(
            model_name='feed',
            name='collection',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feeds', to='core.collection'),
        ),
        migrations.AddField(
            model_name='feed',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feed',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='publication_feeds', to='core.organization'),
        ),
        migrations.AddField(
            model_name='feed',
            name='threat_feed',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='publication_feeds', to='core.threatfeed'),
        ),
        migrations.AddField(
            model_name='collectionobject',
            name='collection',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_objects', to='core.collection'),
        ),
        migrations.AddField(
            model_name='collectionobject',
            name='stix_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_references', to='core.stixobject'),
        ),
        migrations.AddField(
            model_name='collection',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_collections', to='core.organization'),
        ),
        migrations.AddField(
            model_name='collection',
            name='stix_objects',
            field=models.ManyToManyField(related_name='collections', through='core.CollectionObject', to='core.stixobject'),
        ),
        migrations.AddField(
            model_name='authenticationlog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authentication_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='core.organization'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user', '-created_at'], name='core_userse_user_id_819c57_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['is_active'], name='core_userse_is_acti_f7d7fb_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['expires_at'], name='core_userse_expires_c40d52_idx'),
        ),
        migrations.AddIndex(
            model_name='userinvitation',
            index=models.Index(fields=['email', 'status'], name='core_userin_email_38fae7_idx'),
        ),
        migrations.AddIndex(
            model_name='userinvitation',
            index=models.Index(fields=['organization', 'status'], name='core_userin_organiz_bfbc15_idx'),
        ),
        migrations.AddIndex(
            model_name='userinvitation',
            index=models.Index(fields=['token'], name='core_userin_token_3b265a_idx'),
        ),
        migrations.AddIndex(
            model_name='userinvitation',
            index=models.Index(fields=['expires_at'], name='core_userin_expires_f9c41d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userinvitation',
            unique_together={('email', 'organization', 'status')},
        ),
        migrations.AlterUniqueTogether(
            name='ttpdata',
            unique_together={('mitre_technique_id', 'threat_feed')},
        ),
        migrations.AddIndex(
            model_name='trustrelationship',
            index=models.Index(fields=['source_organization'], name='core_trustr_source__dd6c5d_idx'),
        ),
        migrations.AddIndex(
            model_name='trustrelationship',
            index=models.Index(fields=['target_organization'], name='core_trustr_target__01f715_idx'),
        ),
        migrations.AddIndex(
            model_name='trustrelationship',
            index=models.Index(fields=['status'], name='core_trustr_status_ef3968_idx'),
        ),
        migrations.AddIndex(
            model_name='trustrelationship',
            index=models.Index(fields=['trust_level'], name='core_trustr_trust_l_0a5e2d_idx'),
        ),
        migrations.AddIndex(
            model_name='trustrelationship',
            index=models.Index(fields=['is_active'], name='core_trustr_is_acti_4eedc9_idx'),
        ),
        migrations.AddIndex(
            model_name='trustrelationship',
            index=models.Index(fields=['valid_from'], name='core_trustr_valid_f_b31430_idx'),
        ),
        migrations.AddIndex(
            model_name='trustrelationship',
            index=models.Index(fields=['valid_until'], name='core_trustr_valid_u_4e8e35_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='trustrelationship',
            unique_together={('source_organization', 'target_organization')},
        ),
        migrations.AddIndex(
            model_name='trustlog',
            index=models.Index(fields=['action', '-timestamp'], name='core_trustl_action_df7bb7_idx'),
        ),
        migrations.AddIndex(
            model_name='trustlog',
            index=models.Index(fields=['source_organization', '-timestamp'], name='core_trustl_source__393f8c_idx'),
        ),
        migrations.AddIndex(
            model_name='trustlog',
            index=models.Index(fields=['target_organization', '-timestamp'], name='core_trustl_target__a3670d_idx'),
        ),
        migrations.AddIndex(
            model_name='trustlog',
            index=models.Index(fields=['user', '-timestamp'], name='core_trustl_user_id_2799a2_idx'),
        ),
        migrations.AddIndex(
            model_name='trustlog',
            index=models.Index(fields=['success', '-timestamp'], name='core_trustl_success_29abd6_idx'),
        ),
        migrations.AddIndex(
            model_name='trustgroupmembership',
            index=models.Index(fields=['organization'], name='core_trustg_organiz_d46c83_idx'),
        ),
        migrations.AddIndex(
            model_name='trustgroupmembership',
            index=models.Index(fields=['is_active'], name='core_trustg_is_acti_3316d7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='trustgroupmembership',
            unique_together={('trust_group', 'organization')},
        ),
        migrations.AddIndex(
            model_name='trustgroup',
            index=models.Index(fields=['group_type'], name='core_trustg_group_t_0962c8_idx'),
        ),
        migrations.AddIndex(
            model_name='trustgroup',
            index=models.Index(fields=['is_public'], name='core_trustg_is_publ_f78ae8_idx'),
        ),
        migrations.AddIndex(
            model_name='trustgroup',
            index=models.Index(fields=['is_active'], name='core_trustg_is_acti_a012dd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='trusteddevice',
            unique_together={('user', 'device_fingerprint')},
        ),
        migrations.AddIndex(
            model_name='stixobject',
            index=models.Index(fields=['stix_type'], name='core_stixob_stix_ty_2dce34_idx'),
        ),
        migrations.AddIndex(
            model_name='stixobject',
            index=models.Index(fields=['created'], name='core_stixob_created_26f121_idx'),
        ),
        migrations.AddIndex(
            model_name='stixobject',
            index=models.Index(fields=['modified'], name='core_stixob_modifie_36f639_idx'),
        ),
        migrations.AddIndex(
            model_name='stixobject',
            index=models.Index(fields=['created_by_ref'], name='core_stixob_created_c709a7_idx'),
        ),
        migrations.AddIndex(
            model_name='stixobject',
            index=models.Index(fields=['anonymized'], name='core_stixob_anonymi_b28775_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordresettoken',
            index=models.Index(fields=['user', 'expires_at'], name='core_passwo_user_id_23a33a_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordresettoken',
            index=models.Index(fields=['token'], name='core_passwo_token_95f98a_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordresettoken',
            index=models.Index(fields=['created_at'], name='core_passwo_created_c4aa98_idx'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['domain'], name='core_organi_domain_075917_idx'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['is_active'], name='core_organi_is_acti_9518a1_idx'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['is_publisher'], name='core_organi_is_publ_9e5ebe_idx'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['organization_type'], name='core_organi_organiz_58eb74_idx'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['is_verified'], name='core_organi_is_veri_ef39a3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='networkmembership',
            unique_together={('organization', 'network')},
        ),
        migrations.AlterUniqueTogether(
            name='indicator',
            unique_together={('value', 'type', 'threat_feed')},
        ),
        migrations.AlterUniqueTogether(
            name='feed',
            unique_together={('alias', 'organization')},
        ),
        migrations.AddIndex(
            model_name='collectionobject',
            index=models.Index(fields=['collection', 'stix_object'], name='core_collec_collect_e7dabc_idx'),
        ),
        migrations.AddIndex(
            model_name='collectionobject',
            index=models.Index(fields=['date_added'], name='core_collec_date_ad_aa32cf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='collectionobject',
            unique_together={('collection', 'stix_object')},
        ),
        migrations.AddIndex(
            model_name='authenticationlog',
            index=models.Index(fields=['user', '-timestamp'], name='core_authen_user_id_194756_idx'),
        ),
        migrations.AddIndex(
            model_name='authenticationlog',
            index=models.Index(fields=['action', '-timestamp'], name='core_authen_action_2ee47a_idx'),
        ),
        migrations.AddIndex(
            model_name='authenticationlog',
            index=models.Index(fields=['ip_address', '-timestamp'], name='core_authen_ip_addr_e1333b_idx'),
        ),
        migrations.AddIndex(
            model_name='authenticationlog',
            index=models.Index(fields=['success', '-timestamp'], name='core_authen_success_8a2b3a_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['role'], name='core_custom_role_77f64b_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['organization'], name='core_custom_organiz_7b1951_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['is_active'], name='core_custom_is_acti_6cc4d8_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['is_verified'], name='core_custom_is_veri_52a4e1_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='core_custom_email_a5d01e_idx'),
        ),
    ]
