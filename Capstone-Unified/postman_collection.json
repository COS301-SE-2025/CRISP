{
	"info": {
		"_postman_id": "crisp-unified-api-v2",
		"name": "CRISP Unified API - Complete Collection v2",
		"description": "Comprehensive API collection for CRISP Threat Intelligence and Trust Management Platform with automatic authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"version": {
			"major": 2,
			"minor": 1,
			"patch": 0
		}
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-login if no access token exists",
					"if (!pm.globals.get('access_token') || pm.globals.get('access_token') === '') {",
					"    console.log('No access token found, attempting auto-login...');",
					"    ",
					"    const loginRequest = {",
					"        url: pm.globals.get('base_url') + '/api/v1/auth/login/',",
					"        method: 'POST',",
					"        header: {",
					"            'Content-Type': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({",
					"                username: pm.globals.get('admin_username') || 'admin',",
					"                password: pm.globals.get('admin_password') || 'password123'",
					"            })",
					"        }",
					"    };",
					"    ",
					"    pm.sendRequest(loginRequest, function (err, response) {",
					"        if (err) {",
					"            console.log('Login failed:', err);",
					"        } else if (response.code === 200) {",
					"            const responseBody = response.json();",
					"            if (responseBody.success && responseBody.tokens) {",
					"                pm.globals.set('access_token', responseBody.tokens.access);",
					"                pm.globals.set('refresh_token', responseBody.tokens.refresh);",
					"                pm.globals.set('user_id', responseBody.user.id);",
					"                console.log('Auto-login successful!');",
					"            }",
					"        } else {",
					"            console.log('Login failed with status:', response.code);",
					"        }",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_username",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "admin_password",
			"value": "password123",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"    pm.expect(responseBody.tokens).to.have.property('access');",
									"    pm.expect(responseBody.tokens).to.have.property('refresh');",
									"    ",
									"    // Store tokens globally",
									"    pm.globals.set('access_token', responseBody.tokens.access);",
									"    pm.globals.set('refresh_token', responseBody.tokens.refresh);",
									"    pm.globals.set('user_id', responseBody.user.id);",
									"    ",
									"    console.log('Tokens saved to global variables');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{admin_username}}\",\n    \"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login",
								""
							]
						}
					}
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Registration response received', function () {",
									"    pm.response.to.be.ok;",
									"    const responseBody = pm.response.json();",
									"    ",
									"    if (pm.response.code === 200 || pm.response.code === 201) {",
									"        pm.test('Registration successful', function () {",
									"            pm.expect(responseBody.success).to.be.true;",
									"        });",
									"    } else if (pm.response.code === 400) {",
									"        pm.test('Registration failed with validation error', function () {",
									"            pm.expect(responseBody.success).to.be.false;",
									"            pm.expect(responseBody.message).to.exist;",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser_{{$randomInt}}\",\n    \"email\": \"testuser{{$randomInt}}@example.com\",\n    \"password\": \"SecurePassword123!\",\n    \"password_confirm\": \"SecurePassword123!\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"organization\": \"Test Organization\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register",
								""
							]
						}
					}
				},
				{
					"name": "Token Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Token refresh successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"    pm.expect(responseBody.data.tokens).to.have.property('access');",
									"    pm.expect(responseBody.data.tokens).to.have.property('refresh');",
									"    ",
									"    // Update stored tokens",
									"    pm.globals.set('access_token', responseBody.data.tokens.access);",
									"    pm.globals.set('refresh_token', responseBody.data.tokens.refresh);",
									"    ",
									"    console.log('Tokens refreshed and updated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/refresh/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"refresh",
								""
							]
						}
					}
				},
				{
					"name": "Verify Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Token verification successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"    pm.expect(responseBody.data.token_valid).to.be.true;",
									"    pm.expect(responseBody.data.user).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/verify/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"verify",
								""
							]
						}
					}
				},
				{
					"name": "User Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Sessions retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"    pm.expect(responseBody.data.sessions).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/sessions/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"sessions",
								""
							]
						}
					}
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logout successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"    ",
									"    // Clear stored tokens after logout",
									"    pm.globals.unset('access_token');",
									"    pm.globals.unset('refresh_token');",
									"    pm.globals.unset('user_id');",
									"    ",
									"    console.log('Logged out and tokens cleared');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout",
								""
							]
						}
					}
				},
				{
					"name": "Forgot Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Password reset request processed', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/forgot-password/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"forgot-password",
								""
							]
						}
					}
				},
				{
					"name": "Validate Reset Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Reset token validation response received', function () {",
									"    pm.response.to.be.ok;",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"sample-reset-token\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/validate-reset-token/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"validate-reset-token",
								""
							]
						}
					}
				},
				{
					"name": "Reset Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Password reset response received', function () {",
									"    pm.response.to.be.ok;",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"sample-reset-token\",\n    \"new_password\": \"NewSecurePassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/reset-password/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"reset-password",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "üë• User Management",
			"item": [
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User profile retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"    pm.expect(responseBody.data.profile).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/users/profile/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"profile",
								""
							]
						}
					}
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User details retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"    pm.expect(responseBody.data.user).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{user_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{user_id}}",
								""
							]
						}
					}
				},
				{
					"name": "List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Users list retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"    pm.expect(responseBody.data.users).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/users/list/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"list",
								""
							]
						}
					}
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User creation response received', function () {",
									"    pm.response.to.be.ok;",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.exist;",
									"    ",
									"    if (responseBody.success) {",
									"        pm.expect(responseBody.data.user).to.exist;",
									"        console.log('User created successfully');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newuser_{{$randomInt}}\",\n    \"email\": \"newuser{{$randomInt}}@example.com\",\n    \"password\": \"SecurePassword123!\",\n    \"first_name\": \"New\",\n    \"last_name\": \"User\",\n    \"role\": \"viewer\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/create/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"create",
								""
							]
						}
					}
				},
				{
					"name": "User Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User statistics retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/users/statistics/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"statistics",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "üè¢ Organizations",
			"item": [
				{
					"name": "List Organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Organizations list retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/organizations/list_organizations/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organizations",
								"list_organizations",
								""
							]
						}
					}
				},
				{
					"name": "Organization Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Organization types retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/organizations/types/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organizations",
								"types",
								""
							]
						}
					}
				},
				{
					"name": "Create Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Organization creation response received', function () {",
									"    pm.response.to.be.ok;",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.exist;",
									"    ",
									"    if (responseBody.success && responseBody.data && responseBody.data.organization) {",
									"        pm.globals.set('test_org_id', responseBody.data.organization.id);",
									"        console.log('Organization created with ID:', responseBody.data.organization.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Organization {{$randomInt}}\",\n    \"domain\": \"testorg{{$randomInt}}.com\",\n    \"organization_type\": \"security_vendor\",\n    \"description\": \"Test organization for API testing\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/organizations/create_organization/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"organizations",
								"create_organization",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "üîó Trust Management",
			"item": [
				{
					"name": "Trust Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Trust groups retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/trust/groups/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"trust",
								"groups",
								""
							]
						}
					}
				},
				{
					"name": "Trust Levels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Trust levels retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/trust/levels/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"trust",
								"levels",
								""
							]
						}
					}
				},
				{
					"name": "Trust Metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Trust metrics retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/trust/metrics/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"trust",
								"metrics",
								""
							]
						}
					}
				},
				{
					"name": "List Trust Relationships",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Trust relationships retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/trust/relationships/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"trust",
								"relationships",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "üö® Threat Intelligence",
			"item": [
				{
					"name": "List Threat Feeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Threat feeds retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/threat-feeds/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"threat-feeds",
								""
							]
						}
					}
				},
				{
					"name": "List Indicators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Indicators retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/indicators/?page=1&page_size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"indicators",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "20"
								}
							]
						}
					}
				},
				{
					"name": "Recent Indicators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Recent indicators retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/indicators/recent/?hours=24",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"indicators",
								"recent",
								""
							],
							"query": [
								{
									"key": "hours",
									"value": "24"
								}
							]
						}
					}
				},
				{
					"name": "Indicator Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Indicator statistics retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/indicators/stats/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"indicators",
								"stats",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "‚öôÔ∏è Admin Functions",
			"item": [
				{
					"name": "System Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('System health check successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/admin/system_health/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"system_health",
								""
							]
						}
					}
				},
				{
					"name": "Admin Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin dashboard retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/admin/dashboard/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"dashboard",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "üìä System Status",
			"item": [
				{
					"name": "API Root",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('API root accessible', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								""
							]
						}
					}
				},
				{
					"name": "Core System Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('System status check successful', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/status/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"status",
								""
							]
						}
					}
				},
				{
					"name": "Home Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Home page accessible', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						}
					}
				}
			]
		}
	]
}