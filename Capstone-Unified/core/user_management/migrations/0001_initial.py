# Generated by Django 4.2.10 on 2025-08-19 13:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("session_token", models.TextField(help_text="JWT session token")),
                ("refresh_token", models.TextField(help_text="JWT refresh token")),
                (
                    "device_info",
                    models.JSONField(
                        default=dict, help_text="Information about the device/browser"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(help_text="IP address of the session"),
                ),
                (
                    "is_trusted_device",
                    models.BooleanField(
                        default=False, help_text="Whether this is a trusted device"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this session is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(help_text="When this session expires"),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        auto_now=True, help_text="Last activity timestamp"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_management_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Session",
                "verbose_name_plural": "User Sessions",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "-created_at"],
                        name="user_manage_user_id_315cf0_idx",
                    ),
                    models.Index(
                        fields=["is_active"], name="user_manage_is_acti_18e03d_idx"
                    ),
                    models.Index(
                        fields=["expires_at"], name="user_manage_expires_7265ac_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserInvitation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Email address of the invitee", max_length=255
                    ),
                ),
                (
                    "invited_role",
                    models.CharField(
                        choices=[("viewer", "Viewer"), ("publisher", "Publisher")],
                        default="viewer",
                        help_text="Role the invitee will have in the organization",
                        max_length=20,
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        help_text="Secure token for invitation acceptance",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Current status of the invitation",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(help_text="When this invitation expires"),
                ),
                (
                    "accepted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the invitation was accepted",
                        null=True,
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        blank=True, help_text="Optional message from the inviter"
                    ),
                ),
                (
                    "accepted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who accepted the invitation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_mgmt_accepted_invitations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "inviter",
                    models.ForeignKey(
                        help_text="User who sent the invitation",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_mgmt_sent_invitations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="Organization extending the invitation",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_mgmt_invitations",
                        to="core.organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Invitation",
                "verbose_name_plural": "User Invitations",
                "db_table": "user_invitations",
                "indexes": [
                    models.Index(
                        fields=["email", "status"], name="user_invita_email_698bcc_idx"
                    ),
                    models.Index(
                        fields=["organization", "status"],
                        name="user_invita_organiz_129c45_idx",
                    ),
                    models.Index(fields=["token"], name="user_invita_token_59cb54_idx"),
                    models.Index(
                        fields=["expires_at"], name="user_invita_expires_26d966_idx"
                    ),
                ],
                "unique_together": {("email", "organization", "status")},
            },
        ),
        migrations.CreateModel(
            name="TrustedDevice",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "device_fingerprint",
                    models.CharField(
                        help_text="Unique device fingerprint", max_length=255
                    ),
                ),
                (
                    "device_name",
                    models.CharField(
                        help_text="Human-readable device name", max_length=255
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("desktop", "Desktop"),
                            ("laptop", "Laptop"),
                            ("tablet", "Tablet"),
                            ("mobile", "Mobile"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        help_text="Type of device",
                        max_length=50,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this device is currently trusted",
                    ),
                ),
                (
                    "last_used",
                    models.DateTimeField(
                        auto_now=True, help_text="When this device was last used"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When trust for this device expires",
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trusted_devices_list",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Trusted Device",
                "verbose_name_plural": "Trusted Devices",
                "ordering": ["-last_used"],
                "unique_together": {("user", "device_fingerprint")},
            },
        ),
        migrations.CreateModel(
            name="PasswordResetToken",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        help_text="Secure reset token", max_length=255, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(help_text="When this token expires"),
                ),
                (
                    "used_at",
                    models.DateTimeField(
                        blank=True, help_text="When the token was used", null=True
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address that requested the reset",
                        null=True,
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(blank=True, help_text="User agent of the request"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User requesting password reset",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_mgmt_password_reset_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Password Reset Token",
                "verbose_name_plural": "Password Reset Tokens",
                "db_table": "password_reset_tokens",
                "indexes": [
                    models.Index(
                        fields=["user", "expires_at"],
                        name="password_re_user_id_13cacb_idx",
                    ),
                    models.Index(fields=["token"], name="password_re_token_060a1f_idx"),
                    models.Index(
                        fields=["created_at"], name="password_re_created_265757_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="AuthenticationLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("login_success", "Login Success"),
                            ("login_failure", "Login Failure"),
                            ("logout", "Logout"),
                            ("password_change", "Password Change"),
                            ("password_reset", "Password Reset"),
                            ("account_locked", "Account Locked"),
                            ("account_unlocked", "Account Unlocked"),
                            ("user_created", "User Created"),
                            ("user_modified", "User Modified"),
                            ("user_deactivated", "User Deactivated"),
                            ("two_factor_enabled", "Two-Factor Enabled"),
                            ("two_factor_disabled", "Two-Factor Disabled"),
                            ("trusted_device_added", "Trusted Device Added"),
                            ("trusted_device_removed", "Trusted Device Removed"),
                            ("token_refresh", "Token Refresh"),
                            ("session_expired", "Session Expired"),
                        ],
                        help_text="Type of authentication action",
                        max_length=50,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address from which action was performed",
                        null=True,
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="User agent string", null=True
                    ),
                ),
                (
                    "success",
                    models.BooleanField(
                        default=True, help_text="Whether the action was successful"
                    ),
                ),
                (
                    "failure_reason",
                    models.CharField(
                        blank=True,
                        help_text="Reason for failure if action was unsuccessful",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        default=dict,
                        help_text="Additional data about the authentication event",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_mgmt_authentication_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Authentication Log",
                "verbose_name_plural": "Authentication Logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "-timestamp"],
                        name="user_manage_user_id_1f6342_idx",
                    ),
                    models.Index(
                        fields=["action", "-timestamp"],
                        name="user_manage_action_a04e71_idx",
                    ),
                    models.Index(
                        fields=["ip_address", "-timestamp"],
                        name="user_manage_ip_addr_14ddd5_idx",
                    ),
                    models.Index(
                        fields=["success", "-timestamp"],
                        name="user_manage_success_a360a2_idx",
                    ),
                ],
            },
        ),
    ]
