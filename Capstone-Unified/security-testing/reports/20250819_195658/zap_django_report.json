{
	"@programName": "ZAP",
	"@version": "D-2025-08-18",
	"@generated": "Tue, 19 Aug 2025 20:36:41",
	"site":[ 
		{
			"@name": "http://127.0.0.1:8000",
			"@host": "127.0.0.1",
			"@port": "8000",
			"@ssl": "false",
			"alerts": [ 
				{
					"pluginid": "10038",
					"alertRef": "10038-1",
					"alert": "Content Security Policy (CSP) Header Not Set",
					"name": "Content Security Policy (CSP) Header Not Set",
					"riskcode": "2",
					"confidence": "3",
					"riskdesc": "Medium (High)",
					"desc": "<p>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.</p>",
					"instances":[ 
						{
							"id": "38",
							"uri": "http://127.0.0.1:8000",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "43",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "24",
							"uri": "http://127.0.0.1:8000/robots.txt",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "23",
							"uri": "http://127.0.0.1:8000/sitemap.xml",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "54",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						}
					],
					"count": "5",
					"solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.</p>",
					"otherinfo": "",
					"reference": "<p>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy</p><p>https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html</p><p>https://www.w3.org/TR/CSP/</p><p>https://w3c.github.io/webappsec-csp/</p><p>https://web.dev/articles/csp</p><p>https://caniuse.com/#feat=contentsecuritypolicy</p><p>https://content-security-policy.com/</p>",
					"cweid": "693",
					"wascid": "15",
					"sourceid": "6"
				},
				{
					"pluginid": "10098",
					"alertRef": "10098",
					"alert": "Cross-Domain Misconfiguration",
					"name": "Cross-Domain Misconfiguration",
					"riskcode": "2",
					"confidence": "2",
					"riskdesc": "Medium (Medium)",
					"desc": "<p>Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.</p>",
					"instances":[ 
						{
							"id": "28",
							"uri": "http://127.0.0.1:8000/static/admin/css/base.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Access-Control-Allow-Origin: *",
							"otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
						},
						{
							"id": "22",
							"uri": "http://127.0.0.1:8000/static/admin/css/dark_mode.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Access-Control-Allow-Origin: *",
							"otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
						},
						{
							"id": "25",
							"uri": "http://127.0.0.1:8000/static/admin/css/login.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Access-Control-Allow-Origin: *",
							"otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
						},
						{
							"id": "21",
							"uri": "http://127.0.0.1:8000/static/admin/css/nav_sidebar.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Access-Control-Allow-Origin: *",
							"otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
						},
						{
							"id": "35",
							"uri": "http://127.0.0.1:8000/static/admin/css/responsive.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Access-Control-Allow-Origin: *",
							"otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
						},
						{
							"id": "53",
							"uri": "http://127.0.0.1:8000/static/admin/js/nav_sidebar.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Access-Control-Allow-Origin: *",
							"otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
						},
						{
							"id": "49",
							"uri": "http://127.0.0.1:8000/static/admin/js/theme.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Access-Control-Allow-Origin: *",
							"otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
						}
					],
					"count": "7",
					"solution": "<p>Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).</p><p>Configure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.</p>",
					"otherinfo": "<p>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.</p>",
					"reference": "<p>https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy</p>",
					"cweid": "264",
					"wascid": "14",
					"sourceid": "27"
				},
				{
					"pluginid": "10010",
					"alertRef": "10010",
					"alert": "Cookie No HttpOnly Flag",
					"name": "Cookie No HttpOnly Flag",
					"riskcode": "1",
					"confidence": "2",
					"riskdesc": "Low (Medium)",
					"desc": "<p>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.</p>",
					"instances":[ 
						{
							"id": "57",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "GET",
							"param": "csrftoken",
							"attack": "",
							"evidence": "Set-Cookie: csrftoken",
							"otherinfo": ""
						}
					],
					"count": "1",
					"solution": "<p>Ensure that the HttpOnly flag is set for all cookies.</p>",
					"otherinfo": "",
					"reference": "<p>https://owasp.org/www-community/HttpOnly</p>",
					"cweid": "1004",
					"wascid": "13",
					"sourceid": "17"
				},
				{
					"pluginid": "90004",
					"alertRef": "90004-1",
					"alert": "Insufficient Site Isolation Against Spectre Vulnerability",
					"name": "Insufficient Site Isolation Against Spectre Vulnerability",
					"riskcode": "1",
					"confidence": "2",
					"riskdesc": "Low (Medium)",
					"desc": "<p>Cross-Origin-Resource-Policy header is an opt-in header designed to counter side-channels attacks like Spectre. Resource should be specifically set as shareable amongst different origins.</p>",
					"instances":[ 
						{
							"id": "16",
							"uri": "http://127.0.0.1:8000",
							"method": "GET",
							"param": "Cross-Origin-Resource-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "31",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "GET",
							"param": "Cross-Origin-Resource-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "13",
							"uri": "http://127.0.0.1:8000/api/threat-feeds/",
							"method": "GET",
							"param": "Cross-Origin-Resource-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "18",
							"uri": "http://127.0.0.1:8000",
							"method": "GET",
							"param": "Cross-Origin-Embedder-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "32",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "GET",
							"param": "Cross-Origin-Embedder-Policy",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						}
					],
					"count": "5",
					"solution": "<p>Ensure that the application/web server sets the Cross-Origin-Resource-Policy header appropriately, and that it sets the Cross-Origin-Resource-Policy header to 'same-origin' for all web pages.</p><p>'same-site' is considered as less secured and should be avoided.</p><p>If resources must be shared, set the header to 'cross-origin'.</p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Resource-Policy header (https://caniuse.com/mdn-http_headers_cross-origin-resource-policy).</p>",
					"otherinfo": "",
					"reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy</p>",
					"cweid": "693",
					"wascid": "14",
					"sourceid": "6"
				},
				{
					"pluginid": "10063",
					"alertRef": "10063-1",
					"alert": "Permissions Policy Header Not Set",
					"name": "Permissions Policy Header Not Set",
					"riskcode": "1",
					"confidence": "2",
					"riskdesc": "Low (Medium)",
					"desc": "<p>Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.</p>",
					"instances":[ 
						{
							"id": "6",
							"uri": "http://127.0.0.1:8000",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "20",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "8",
							"uri": "http://127.0.0.1:8000/robots.txt",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "9",
							"uri": "http://127.0.0.1:8000/sitemap.xml",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "42",
							"uri": "http://127.0.0.1:8000/static/admin/js/nav_sidebar.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "46",
							"uri": "http://127.0.0.1:8000/static/admin/js/theme.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "48",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						}
					],
					"count": "7",
					"solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.</p>",
					"otherinfo": "",
					"reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy</p><p>https://developer.chrome.com/blog/feature-policy/</p><p>https://scotthelme.co.uk/a-new-security-header-feature-policy/</p><p>https://w3c.github.io/webappsec-feature-policy/</p><p>https://www.smashingmagazine.com/2018/12/feature-policy/</p>",
					"cweid": "693",
					"wascid": "15",
					"sourceid": "6"
				},
				{
					"pluginid": "10036",
					"alertRef": "10036",
					"alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
					"name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
					"riskcode": "1",
					"confidence": "3",
					"riskdesc": "Low (High)",
					"desc": "<p>The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.</p>",
					"instances":[ 
						{
							"id": "45",
							"uri": "http://127.0.0.1:8000",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "WSGIServer/0.2 CPython/3.10.12",
							"otherinfo": ""
						},
						{
							"id": "27",
							"uri": "http://127.0.0.1:8000/admin/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "WSGIServer/0.2 CPython/3.10.12",
							"otherinfo": ""
						},
						{
							"id": "60",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "WSGIServer/0.2 CPython/3.10.12",
							"otherinfo": ""
						},
						{
							"id": "26",
							"uri": "http://127.0.0.1:8000/api/threat-feeds/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "WSGIServer/0.2 CPython/3.10.12",
							"otherinfo": ""
						},
						{
							"id": "30",
							"uri": "http://127.0.0.1:8000/robots.txt",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "WSGIServer/0.2 CPython/3.10.12",
							"otherinfo": ""
						},
						{
							"id": "29",
							"uri": "http://127.0.0.1:8000/sitemap.xml",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "WSGIServer/0.2 CPython/3.10.12",
							"otherinfo": ""
						},
						{
							"id": "44",
							"uri": "http://127.0.0.1:8000/static/admin/css/base.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "WSGIServer/0.2 CPython/3.10.12",
							"otherinfo": ""
						},
						{
							"id": "34",
							"uri": "http://127.0.0.1:8000/static/admin/css/dark_mode.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "WSGIServer/0.2 CPython/3.10.12",
							"otherinfo": ""
						},
						{
							"id": "41",
							"uri": "http://127.0.0.1:8000/static/admin/css/login.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "WSGIServer/0.2 CPython/3.10.12",
							"otherinfo": ""
						},
						{
							"id": "36",
							"uri": "http://127.0.0.1:8000/static/admin/css/nav_sidebar.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "WSGIServer/0.2 CPython/3.10.12",
							"otherinfo": ""
						},
						{
							"id": "50",
							"uri": "http://127.0.0.1:8000/static/admin/css/responsive.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "WSGIServer/0.2 CPython/3.10.12",
							"otherinfo": ""
						},
						{
							"id": "55",
							"uri": "http://127.0.0.1:8000/static/admin/js/nav_sidebar.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "WSGIServer/0.2 CPython/3.10.12",
							"otherinfo": ""
						},
						{
							"id": "52",
							"uri": "http://127.0.0.1:8000/static/admin/js/theme.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "WSGIServer/0.2 CPython/3.10.12",
							"otherinfo": ""
						},
						{
							"id": "59",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "WSGIServer/0.2 CPython/3.10.12",
							"otherinfo": ""
						}
					],
					"count": "14",
					"solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.</p>",
					"otherinfo": "",
					"reference": "<p>https://httpd.apache.org/docs/current/mod/core.html#servertokens</p><p>https://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)</p><p>https://www.troyhunt.com/shhh-dont-let-your-response-headers/</p>",
					"cweid": "497",
					"wascid": "13",
					"sourceid": "6"
				},
				{
					"pluginid": "10111",
					"alertRef": "10111",
					"alert": "Authentication Request Identified",
					"name": "Authentication Request Identified",
					"riskcode": "0",
					"confidence": "3",
					"riskdesc": "Informational (High)",
					"desc": "<p>The given request has been identified as an authentication request. The 'Other Info' field contains a set of key=value lines which identify any relevant fields. If the request is in a context which has an Authentication Method set to \"Auto-Detect\" then this rule will change the authentication to match the request identified.</p>",
					"instances":[ 
						{
							"id": "51",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "POST",
							"param": "username",
							"attack": "",
							"evidence": "password",
							"otherinfo": "userParam=username\nuserValue=ZAP\npasswordParam=password\nreferer=http://127.0.0.1:8000/admin/login/?next=/admin/\ncsrfToken=csrfmiddlewaretoken"
						}
					],
					"count": "1",
					"solution": "<p>This is an informational alert rather than a vulnerability and so there is nothing to fix.</p>",
					"otherinfo": "<p>userParam=username</p><p>userValue=ZAP</p><p>passwordParam=password</p><p>referer=http://127.0.0.1:8000/admin/login/?next=/admin/</p><p>csrfToken=csrfmiddlewaretoken</p>",
					"reference": "<p>https://www.zaproxy.org/docs/desktop/addons/authentication-helper/auth-req-id/</p>",
					"cweid": "-1",
					"wascid": "-1",
					"sourceid": "38"
				},
				{
					"pluginid": "10049",
					"alertRef": "10049",
					"alert": "Non-Storable Content",
					"name": "Non-Storable Content",
					"riskcode": "0",
					"confidence": "2",
					"riskdesc": "Informational (Medium)",
					"desc": "<p>The response contents are not storable by caching components such as proxy servers. If the response does not contain sensitive, personal or user-specific information, it may benefit from being stored and cached, to improve performance.</p>",
					"instances":[ 
						{
							"id": "15",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "no-store",
							"otherinfo": ""
						},
						{
							"id": "47",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "403",
							"otherinfo": ""
						}
					],
					"count": "2",
					"solution": "<p>The content may be marked as storable by ensuring that the following conditions are satisfied:</p><p>The request method must be understood by the cache and defined as being cacheable (\"GET\", \"HEAD\", and \"POST\" are currently defined as cacheable)</p><p>The response status code must be understood by the cache (one of the 1XX, 2XX, 3XX, 4XX, or 5XX response classes are generally understood)</p><p>The \"no-store\" cache directive must not appear in the request or response header fields</p><p>For caching by \"shared\" caches such as \"proxy\" caches, the \"private\" response directive must not appear in the response</p><p>For caching by \"shared\" caches such as \"proxy\" caches, the \"Authorization\" header field must not appear in the request, unless the response explicitly allows it (using one of the \"must-revalidate\", \"public\", or \"s-maxage\" Cache-Control response directives)</p><p>In addition to the conditions above, at least one of the following conditions must also be satisfied by the response:</p><p>It must contain an \"Expires\" header field</p><p>It must contain a \"max-age\" response directive</p><p>For \"shared\" caches such as \"proxy\" caches, it must contain a \"s-maxage\" response directive</p><p>It must contain a \"Cache Control Extension\" that allows it to be cached</p><p>It must have a status code that is defined as cacheable by default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).</p>",
					"otherinfo": "",
					"reference": "<p>https://datatracker.ietf.org/doc/html/rfc7234</p><p>https://datatracker.ietf.org/doc/html/rfc7231</p><p>https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html</p>",
					"cweid": "524",
					"wascid": "13",
					"sourceid": "17"
				},
				{
					"pluginid": "10112",
					"alertRef": "10112",
					"alert": "Session Management Response Identified",
					"name": "Session Management Response Identified",
					"riskcode": "0",
					"confidence": "2",
					"riskdesc": "Informational (Medium)",
					"desc": "<p>The given response has been identified as containing a session management token. The 'Other Info' field contains a set of header tokens that can be used in the Header Based Session Management Method. If the request is in a context which has a Session Management Method set to \"Auto-Detect\" then this rule will change the session management to use the tokens identified.</p>",
					"instances":[ 
						{
							"id": "39",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "GET",
							"param": "csrftoken",
							"attack": "",
							"evidence": "csrftoken",
							"otherinfo": "cookie:csrftoken"
						}
					],
					"count": "1",
					"solution": "<p>This is an informational alert rather than a vulnerability and so there is nothing to fix.</p>",
					"otherinfo": "<p>cookie:csrftoken</p>",
					"reference": "<p>https://www.zaproxy.org/docs/desktop/addons/authentication-helper/session-mgmt-id</p>",
					"cweid": "-1",
					"wascid": "-1",
					"sourceid": "17"
				},
				{
					"pluginid": "10049",
					"alertRef": "10049",
					"alert": "Storable and Cacheable Content",
					"name": "Storable and Cacheable Content",
					"riskcode": "0",
					"confidence": "2",
					"riskdesc": "Informational (Medium)",
					"desc": "<p>The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where \"shared\" caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.</p>",
					"instances":[ 
						{
							"id": "14",
							"uri": "http://127.0.0.1:8000",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"id": "4",
							"uri": "http://127.0.0.1:8000/api/threat-feeds/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"id": "0",
							"uri": "http://127.0.0.1:8000/robots.txt",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"id": "10",
							"uri": "http://127.0.0.1:8000/static/admin/css/base.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "max-age=60",
							"otherinfo": ""
						},
						{
							"id": "5",
							"uri": "http://127.0.0.1:8000/static/admin/css/dark_mode.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "max-age=60",
							"otherinfo": ""
						},
						{
							"id": "11",
							"uri": "http://127.0.0.1:8000/static/admin/css/login.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "max-age=60",
							"otherinfo": ""
						},
						{
							"id": "7",
							"uri": "http://127.0.0.1:8000/static/admin/css/nav_sidebar.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "max-age=60",
							"otherinfo": ""
						},
						{
							"id": "12",
							"uri": "http://127.0.0.1:8000/static/admin/css/responsive.css",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "max-age=60",
							"otherinfo": ""
						},
						{
							"id": "37",
							"uri": "http://127.0.0.1:8000/static/admin/js/nav_sidebar.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "max-age=60",
							"otherinfo": ""
						},
						{
							"id": "40",
							"uri": "http://127.0.0.1:8000/static/admin/js/theme.js",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "max-age=60",
							"otherinfo": ""
						}
					],
					"count": "10",
					"solution": "<p>Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:</p><p>Cache-Control: no-cache, no-store, must-revalidate, private</p><p>Pragma: no-cache</p><p>Expires: 0</p><p>This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.</p>",
					"otherinfo": "<p>In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.</p>",
					"reference": "<p>https://datatracker.ietf.org/doc/html/rfc7234</p><p>https://datatracker.ietf.org/doc/html/rfc7231</p><p>https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html</p>",
					"cweid": "524",
					"wascid": "13",
					"sourceid": "1"
				},
				{
					"pluginid": "10031",
					"alertRef": "10031",
					"alert": "User Controllable HTML Element Attribute (Potential XSS)",
					"name": "User Controllable HTML Element Attribute (Potential XSS)",
					"riskcode": "0",
					"confidence": "1",
					"riskdesc": "Informational (Low)",
					"desc": "<p>This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.</p>",
					"instances":[ 
						{
							"id": "61",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "GET",
							"param": "next",
							"attack": "",
							"evidence": "",
							"otherinfo": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\n\nhttp://127.0.0.1:8000/admin/login/?next=/admin/\n\nappears to include user input in:\na(n) [a] tag [href] attribute\n\nThe user input found was:\nnext=/admin/\n\nThe user-controlled value was:\n/admin/"
						},
						{
							"id": "62",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "GET",
							"param": "next",
							"attack": "",
							"evidence": "",
							"otherinfo": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\n\nhttp://127.0.0.1:8000/admin/login/?next=/admin/\n\nappears to include user input in:\na(n) [form] tag [action] attribute\n\nThe user input found was:\nnext=/admin/\n\nThe user-controlled value was:\n/admin/login/?next=/admin/"
						},
						{
							"id": "63",
							"uri": "http://127.0.0.1:8000/admin/login/?next=/admin/",
							"method": "GET",
							"param": "next",
							"attack": "",
							"evidence": "",
							"otherinfo": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\n\nhttp://127.0.0.1:8000/admin/login/?next=/admin/\n\nappears to include user input in:\na(n) [input] tag [value] attribute\n\nThe user input found was:\nnext=/admin/\n\nThe user-controlled value was:\n/admin/"
						}
					],
					"count": "3",
					"solution": "<p>Validate all input and sanitize output it before writing to any HTML attributes.</p>",
					"otherinfo": "<p>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:</p><p></p><p>http://127.0.0.1:8000/admin/login/?next=/admin/</p><p></p><p>appears to include user input in:</p><p>a(n) [a] tag [href] attribute</p><p></p><p>The user input found was:</p><p>next=/admin/</p><p></p><p>The user-controlled value was:</p><p>/admin/</p>",
					"reference": "<p>https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html</p>",
					"cweid": "20",
					"wascid": "20",
					"sourceid": "17"
				}
			]
		}
	],
	"sequences":[
	]

}
