# Generated by Django 4.2.23 on 2025-08-13 19:31

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("viewer", "Viewer"),
                            ("publisher", "Publisher"),
                            ("BlueVisionAdmin", "BlueVision Administrator"),
                        ],
                        default="viewer",
                        help_text="User's role in the system",
                        max_length=20,
                    ),
                ),
                (
                    "is_publisher",
                    models.BooleanField(
                        default=False,
                        help_text="Whether user can publish threat intelligence",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False, help_text="Whether user account is verified"
                    ),
                ),
                (
                    "failed_login_attempts",
                    models.IntegerField(
                        default=0,
                        help_text="Number of consecutive failed login attempts",
                    ),
                ),
                (
                    "account_locked_until",
                    models.DateTimeField(
                        blank=True, help_text="When account lock expires", null=True
                    ),
                ),
                (
                    "password_changed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When password was last changed",
                        null=True,
                    ),
                ),
                (
                    "two_factor_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Whether two-factor authentication is enabled",
                    ),
                ),
                (
                    "two_factor_secret",
                    models.CharField(
                        blank=True,
                        help_text="Secret for two-factor authentication",
                        max_length=32,
                    ),
                ),
                (
                    "trusted_devices",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of trusted device fingerprints",
                    ),
                ),
                (
                    "preferences",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="User preferences and settings",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional user metadata"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "ordering": ["username"],
            },
        ),
        migrations.CreateModel(
            name="AuthenticationLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("login_success", "Login Success"),
                            ("login_failure", "Login Failure"),
                            ("logout", "Logout"),
                            ("password_change", "Password Change"),
                            ("password_reset", "Password Reset"),
                            ("account_locked", "Account Locked"),
                            ("account_unlocked", "Account Unlocked"),
                            ("user_created", "User Created"),
                            ("user_modified", "User Modified"),
                            ("user_deactivated", "User Deactivated"),
                            ("two_factor_enabled", "Two-Factor Enabled"),
                            ("two_factor_disabled", "Two-Factor Disabled"),
                            ("trusted_device_added", "Trusted Device Added"),
                            ("trusted_device_removed", "Trusted Device Removed"),
                            ("token_refresh", "Token Refresh"),
                            ("session_expired", "Session Expired"),
                        ],
                        help_text="Type of authentication action",
                        max_length=50,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address from which action was performed",
                        null=True,
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="User agent string", null=True
                    ),
                ),
                (
                    "success",
                    models.BooleanField(
                        default=True, help_text="Whether the action was successful"
                    ),
                ),
                (
                    "failure_reason",
                    models.CharField(
                        blank=True,
                        help_text="Reason for failure if action was unsuccessful",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        default=dict,
                        help_text="Additional data about the authentication event",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Authentication Log",
                "verbose_name_plural": "Authentication Logs",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the organization",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the organization"
                    ),
                ),
                (
                    "domain",
                    models.CharField(
                        help_text="Organization's domain (e.g., university.edu)",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        help_text="Primary contact email for the organization",
                        max_length=254,
                    ),
                ),
                (
                    "website",
                    models.URLField(blank=True, help_text="Organization's website URL"),
                ),
                (
                    "organization_type",
                    models.CharField(
                        choices=[
                            ("educational", "Educational"),
                            ("government", "Government"),
                            ("private", "Private"),
                        ],
                        default="educational",
                        help_text="Type of organization (educational, government, private)",
                        max_length=100,
                    ),
                ),
                (
                    "is_publisher",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this organization can publish threat intelligence",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False, help_text="Whether this organization is verified"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this organization is active"
                    ),
                ),
                ("trust_metadata", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.CharField(
                        blank=True,
                        help_text="User who created this organization",
                        max_length=255,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Organization",
                "verbose_name_plural": "Organizations",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("session_token", models.TextField(help_text="JWT session token")),
                ("refresh_token", models.TextField(help_text="JWT refresh token")),
                (
                    "device_info",
                    models.JSONField(
                        default=dict, help_text="Information about the device/browser"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(help_text="IP address of the session"),
                ),
                (
                    "is_trusted_device",
                    models.BooleanField(
                        default=False, help_text="Whether this is a trusted device"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this session is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(help_text="When this session expires"),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        auto_now=True, help_text="Last activity timestamp"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Session",
                "verbose_name_plural": "User Sessions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "avatar",
                    models.URLField(
                        blank=True, help_text="URL to user's avatar image", null=True
                    ),
                ),
                ("bio", models.TextField(blank=True, help_text="User's biography")),
                (
                    "department",
                    models.CharField(
                        blank=True,
                        help_text="User's department within organization",
                        max_length=255,
                    ),
                ),
                (
                    "job_title",
                    models.CharField(
                        blank=True, help_text="User's job title", max_length=255
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, help_text="User's phone number", max_length=20
                    ),
                ),
                (
                    "email_notifications",
                    models.BooleanField(
                        default=True, help_text="Whether to receive email notifications"
                    ),
                ),
                (
                    "threat_alerts",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to receive threat intelligence alerts",
                    ),
                ),
                (
                    "security_notifications",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to receive security notifications",
                    ),
                ),
                (
                    "profile_visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("organization", "Organization Only"),
                            ("trusted", "Trusted Organizations"),
                            ("public", "Public"),
                        ],
                        default="organization",
                        help_text="Who can see this profile",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
            },
        ),
        migrations.CreateModel(
            name="UserInvitation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Email address of the invitee", max_length=255
                    ),
                ),
                (
                    "invited_role",
                    models.CharField(
                        choices=[("viewer", "Viewer"), ("publisher", "Publisher")],
                        default="viewer",
                        help_text="Role the invitee will have in the organization",
                        max_length=20,
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        help_text="Secure token for invitation acceptance",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Current status of the invitation",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(help_text="When this invitation expires"),
                ),
                (
                    "accepted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the invitation was accepted",
                        null=True,
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        blank=True, help_text="Optional message from the inviter"
                    ),
                ),
                (
                    "accepted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who accepted the invitation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="accepted_invitations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "inviter",
                    models.ForeignKey(
                        help_text="User who sent the invitation",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_invitations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="Organization extending the invitation",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invitations",
                        to="user_management.organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Invitation",
                "verbose_name_plural": "User Invitations",
                "db_table": "user_invitations",
            },
        ),
        migrations.CreateModel(
            name="TrustedDevice",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "device_fingerprint",
                    models.CharField(
                        help_text="Unique device fingerprint", max_length=255
                    ),
                ),
                (
                    "device_name",
                    models.CharField(
                        help_text="Human-readable device name", max_length=255
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("desktop", "Desktop"),
                            ("laptop", "Laptop"),
                            ("tablet", "Tablet"),
                            ("mobile", "Mobile"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        help_text="Type of device",
                        max_length=50,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this device is currently trusted",
                    ),
                ),
                (
                    "last_used",
                    models.DateTimeField(
                        auto_now=True, help_text="When this device was last used"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When trust for this device expires",
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="devices",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Trusted Device",
                "verbose_name_plural": "Trusted Devices",
                "ordering": ["-last_used"],
            },
        ),
        migrations.CreateModel(
            name="PasswordResetToken",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        help_text="Secure reset token", max_length=255, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(help_text="When this token expires"),
                ),
                (
                    "used_at",
                    models.DateTimeField(
                        blank=True, help_text="When the token was used", null=True
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address that requested the reset",
                        null=True,
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(blank=True, help_text="User agent of the request"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User requesting password reset",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_reset_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Password Reset Token",
                "verbose_name_plural": "Password Reset Tokens",
                "db_table": "password_reset_tokens",
            },
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(fields=["domain"], name="user_manage_domain_e74ab6_idx"),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(
                fields=["is_active"], name="user_manage_is_acti_0fa37c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(
                fields=["is_publisher"], name="user_manage_is_publ_d22971_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(
                fields=["organization_type"], name="user_manage_organiz_87c267_idx"
            ),
        ),
        migrations.AddField(
            model_name="authenticationlog",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="authentication_logs",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="organization",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="users",
                to="user_management.organization",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["user", "-created_at"], name="user_manage_user_id_315cf0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["is_active"], name="user_manage_is_acti_18e03d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersession",
            index=models.Index(
                fields=["expires_at"], name="user_manage_expires_7265ac_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userinvitation",
            index=models.Index(
                fields=["email", "status"], name="user_invita_email_698bcc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userinvitation",
            index=models.Index(
                fields=["organization", "status"], name="user_invita_organiz_129c45_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userinvitation",
            index=models.Index(fields=["token"], name="user_invita_token_59cb54_idx"),
        ),
        migrations.AddIndex(
            model_name="userinvitation",
            index=models.Index(
                fields=["expires_at"], name="user_invita_expires_26d966_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userinvitation",
            unique_together={("email", "organization", "status")},
        ),
        migrations.AlterUniqueTogether(
            name="trusteddevice",
            unique_together={("user", "device_fingerprint")},
        ),
        migrations.AddIndex(
            model_name="passwordresettoken",
            index=models.Index(
                fields=["user", "expires_at"], name="password_re_user_id_13cacb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="passwordresettoken",
            index=models.Index(fields=["token"], name="password_re_token_060a1f_idx"),
        ),
        migrations.AddIndex(
            model_name="passwordresettoken",
            index=models.Index(
                fields=["created_at"], name="password_re_created_265757_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="authenticationlog",
            index=models.Index(
                fields=["user", "-timestamp"], name="user_manage_user_id_1f6342_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="authenticationlog",
            index=models.Index(
                fields=["action", "-timestamp"], name="user_manage_action_a04e71_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="authenticationlog",
            index=models.Index(
                fields=["ip_address", "-timestamp"],
                name="user_manage_ip_addr_14ddd5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="authenticationlog",
            index=models.Index(
                fields=["success", "-timestamp"], name="user_manage_success_a360a2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(fields=["role"], name="user_manage_role_6457cd_idx"),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(
                fields=["organization"], name="user_manage_organiz_800725_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(
                fields=["is_active"], name="user_manage_is_acti_1defd6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(
                fields=["is_verified"], name="user_manage_is_veri_3fc925_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(fields=["email"], name="user_manage_email_4b7bdf_idx"),
        ),
    ]
