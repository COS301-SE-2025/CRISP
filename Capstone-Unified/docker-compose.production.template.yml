services:
  # Nginx reverse proxy
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - app_static:/app/staticfiles:ro
      - app_media:/app/media:ro
      - certbot_data:/etc/letsencrypt:ro
      - certbot_webroot:/var/www/certbot:ro
    depends_on:
      - app
    restart: unless-stopped
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot:latest
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Django application
  app:
    image: datadefenders/crisp:Dev
    expose:
      - "8000"
    env_file:
      - .env.production
    environment:
      - DEBUG=False
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-GENERATE_SECURE_SECRET_KEY_FOR_PRODUCTION}
      - DATABASE_URL=postgresql://postgres:YOUR_DB_PASSWORD@db:5432/crisp
      - ALLOWED_HOSTS=YOUR_DOMAIN.COM,www.YOUR_DOMAIN.COM,YOUR_SERVER_IP,localhost,127.0.0.1,nginx
      - DB_NAME=crisp
      - DB_USER=postgres
      - DB_PASSWORD=YOUR_DB_PASSWORD
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
      - OTX_ENABLED=true
      - REACT_APP_API_BASE_URL=http://YOUR_DOMAIN.COM
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - app_media:/app/media
      - app_logs:/app/logs
      - app_static:/app/staticfiles
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery worker for background tasks
  celery:
    image: datadefenders/crisp:Dev
    env_file:
      - .env.production
    environment:
      - DEBUG=False
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-GENERATE_SECURE_SECRET_KEY_FOR_PRODUCTION}
      - DATABASE_URL=postgresql://postgres:YOUR_DB_PASSWORD@db:5432/crisp
      - DB_NAME=crisp
      - DB_USER=postgres
      - DB_PASSWORD=YOUR_DB_PASSWORD
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - app_media:/app/media
      - app_logs:/app/logs
    command: celery -A settings worker -l info --concurrency=2

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=crisp
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=YOUR_DB_PASSWORD
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "5432:5432"

volumes:
  postgres_data:
  redis_data:
  app_media:
  app_logs:
  app_static:
  certbot_data:
  certbot_webroot: